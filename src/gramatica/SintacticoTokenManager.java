/* SintacticoTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. SintacticoTokenManager.java */
package gramatica;
import ArbolAST.Nodo;
import javax.swing.JOptionPane;

/** Token Manager. */
@SuppressWarnings("unused")public class SintacticoTokenManager implements SintacticoConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffe00000000L) != 0L || (active1 & 0x19fffffffL) != 0L)
         {
            jjmatchedKind = 97;
            return 17;
         }
         return -1;
      case 1:
         if ((active0 & 0xeff9fed800000000L) != 0L || (active1 & 0x19ff7ffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 1;
            }
            return 17;
         }
         if ((active0 & 0x1006012600000000L) != 0L || (active1 & 0x80000L) != 0L)
            return 17;
         return -1;
      case 2:
         if ((active0 & 0xef7ffffc00000000L) != 0L || (active1 & 0x19ff7efffL) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 2;
            return 17;
         }
         if ((active0 & 0x80000000000000L) != 0L)
            return 17;
         if ((active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x5400000000L) != 0L || (active1 & 0x18202001L) != 0L)
            return 17;
         if ((active1 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xef7fffa800000000L) != 0L || (active1 & 0x187d3cffeL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 3;
            }
            return 17;
         }
         return -1;
      case 4:
         if ((active0 & 0xcf7ff3a800000000L) != 0L || (active1 & 0x112d3ce7eL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 4;
            }
            return 17;
         }
         if ((active0 & 0x20000c0000000000L) != 0L || (active1 & 0x84000180L) != 0L)
            return 17;
         if ((active1 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0xcd5fcba800000000L) != 0L || (active1 & 0x110d3ce7eL) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 5;
            return 17;
         }
         if ((active0 & 0x220300000000000L) != 0L || (active1 & 0x2000000L) != 0L)
            return 17;
         if ((active1 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0xc13ca8800000000L) != 0L || (active1 & 0x110528e50L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 6;
            return 17;
         }
         if ((active0 & 0xc14c012000000000L) != 0L || (active1 & 0x81402eL) != 0L)
            return 17;
         if ((active1 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x411080800000000L) != 0L || (active1 & 0x100000e50L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 7;
            return 17;
         }
         if ((active0 & 0x802c28000000000L) != 0L || (active1 & 0x10528000L) != 0L)
            return 17;
         if ((active1 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x410080800000000L) != 0L || (active1 & 0xe50L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 8;
            return 17;
         }
         if ((active0 & 0x1000000000000L) != 0L || (active1 & 0x100000000L) != 0L)
            return 17;
         return -1;
      case 9:
         if ((active1 & 0xe10L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 9;
            }
            return 17;
         }
         if ((active0 & 0x410080800000000L) != 0L || (active1 & 0x40L) != 0L)
            return 17;
         return -1;
      case 10:
         if ((active1 & 0xe10L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 10;
            return 17;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 17;
         return -1;
      case 11:
         if ((active1 & 0xe10L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 11;
            return 17;
         }
         return -1;
      case 12:
         if ((active1 & 0x600L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 12;
            return 17;
         }
         if ((active1 & 0x810L) != 0L)
            return 17;
         return -1;
      case 13:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 13;
            return 17;
         }
         if ((active1 & 0x200L) != 0L)
            return 17;
         return -1;
      case 14:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 14;
            return 17;
         }
         return -1;
      case 15:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 15;
            return 17;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 22);
      case 41:
         return jjStopAtPos(0, 23);
      case 42:
         return jjStopAtPos(0, 19);
      case 43:
         return jjStopAtPos(0, 20);
      case 44:
         return jjStopAtPos(0, 27);
      case 45:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 32);
      case 47:
         return jjStopAtPos(0, 18);
      case 58:
         return jjStopAtPos(0, 31);
      case 59:
         return jjStopAtPos(0, 26);
      case 60:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x80000000000L);
      case 61:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 62:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x100000000000L);
      case 64:
         return jjStopAtPos(0, 30);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x8500000000000000L, 0x40400L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x20200000000000L, 0x200040L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x901000000000L, 0x14100L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x2006012000000000L, 0x1a080000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x20000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0xc0000000000L, 0x8L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x800020000000000L, 0x800000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa00L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x48000000000000L, 0x20L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x80004000000000L, 0x100010L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x4L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x10000e00000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000080L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x3L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x4000000L);
      case 94:
         return jjStopAtPos(0, 17);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 123:
         return jjStopAtPos(0, 24);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 25);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 60:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         break;
      case 61:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         else if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         else if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 62:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000205000000000L, active1, 0x1c0100c0L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x170d2800000000L, active1, 0x1100004L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 73:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8400000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x20000L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 60, 17);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x800000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x20a0900000000000L, active1, 0x2204000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0x110L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0x40003L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80408000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xa00L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2400L);
      case 124:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L);
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x22c0000000000L, active1, 0x4040000L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x100L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x20000L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x4010000800000000L, active1, 0x4000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0x10000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x2004100400000000L, active1, 0x8L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0x200010L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 17);
         return jjMoveStringLiteralDfa3_0(active0, 0x120004000000000L, active1, 0x100000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x801001000000000L, active1, 0x40L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x8400010000000000L, active1, 0x18800004L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000002L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xa00L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80002000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100400000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L);
      case 124:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 43:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 65:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x102L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2010000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x18L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8954012800000000L, active1, 0x10800060L);
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
      case 76:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x2400000000000L, active1, 0x80L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x120000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x1000L);
      case 79:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 17);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x4004L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);
      case 82:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x28020000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x201100000000000L, active1, 0x1000000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000L);
      case 111:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80008000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xa00L);
      case 124:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(4, 88);
         break;
      case 43:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(4, 29);
         break;
      case 65:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x623180000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x10002800000000L, active1, 0x4020L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0x40000L);
      case 69:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x10c000000000000L, active1, 0x800000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0x130008L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0x2000000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x40010000000000L, active1, 0L);
      case 79:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 17);
         break;
      case 82:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0xc800000000000000L, active1, 0x6L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0x10000000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xa00L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 111:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 17);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x814c000000000000L, active1, 0x14000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000800000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x50L);
      case 69:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000810000000000L, active1, 0x840000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000002L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20004L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L);
      case 80:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 17);
         break;
      case 82:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 17);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 17);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x2008000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x800002000000000L, active1, 0x20L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x1400000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0xa00L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x802008000000000L, active1, 0x20040L);
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x410020800000000L, active1, 0x10L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0x10000000L);
      case 78:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 17);
         break;
      case 79:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 17);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 17);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 17);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      case 82:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 17);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 17);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 17);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 17);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 17);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 17);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 17);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 17);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100400000L);
      case 111:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(6, 76);
         break;
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0L);
      case 67:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(7, 82);
         break;
      case 69:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 92, 17);
         break;
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10L);
      case 79:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 47, 17);
         return jjMoveStringLiteralDfa8_0(active0, 0x10080800000000L, active1, 0L);
      case 80:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 17);
         break;
      case 82:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 17);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 17);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 17);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 81, 17);
         break;
      case 83:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 17);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 17);
         break;
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40L);
      case 90:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 79, 17);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800L);
      case 114:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 17);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000600L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000800000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40L);
      case 82:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 48, 17);
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200L);
      case 111:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 96, 17);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 17);
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10L);
      case 82:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 58, 17);
         break;
      case 83:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 70, 17);
         break;
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x600L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10L);
      case 82:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 52, 17);
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa12_0(active1, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active1, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active1, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 79:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(12, 68, 17);
         break;
      case 97:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(12, 75, 17);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_0(active1, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(13, 73, 17);
         return jjMoveStringLiteralDfa14_0(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa15_0(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa16_0(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(16, 74, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 64;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAddTwoStates(13, 14); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 7); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(19, 20); }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 35)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 6:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 7:
                  if (curChar == 42)
                     { jjCheckNAddStates(11, 14); }
                  break;
               case 8:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(8, 9); }
                  break;
               case 9:
                  if ((0xfffffbf7ffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 10:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 11:
                  if (curChar == 35 && kind > 7)
                     kind = 7;
                  break;
               case 12:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 14:
                  if (curChar != 46)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(15); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(15); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 19:
                  if ((0xfffffffbfffff9ffL & l) != 0L)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 20:
                  if (curChar == 34 && kind > 100)
                     kind = 100;
                  break;
               case 21:
                  if (curChar == 39)
                     { jjCheckNAddStates(0, 7); }
                  break;
               case 23:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 24:
                  if (curChar == 39 && kind > 98)
                     kind = 98;
                  break;
               case 25:
                  if ((0xffffffffffffd9ffL & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 26:
                  if (curChar == 48)
                     { jjCheckNAdd(27); }
                  break;
               case 27:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(28); }
                  break;
               case 28:
                  if (curChar == 45)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 29:
                  if (curChar == 48)
                     { jjCheckNAdd(30); }
                  break;
               case 30:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(31); }
                  break;
               case 31:
                  if (curChar == 45)
                     { jjCheckNAdd(32); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(32, 33); }
                  break;
               case 33:
                  if (curChar == 39 && kind > 101)
                     kind = 101;
                  break;
               case 34:
                  if (curChar == 49)
                     { jjAddStates(18, 20); }
                  break;
               case 35:
                  if (curChar == 48)
                     { jjCheckNAdd(31); }
                  break;
               case 36:
                  if (curChar == 49)
                     { jjCheckNAdd(31); }
                  break;
               case 37:
                  if (curChar == 50)
                     { jjCheckNAdd(31); }
                  break;
               case 38:
                  if ((0xe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(28); }
                  break;
               case 40:
                  if (curChar == 48)
                     { jjCheckNAdd(41); }
                  break;
               case 41:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(42); }
                  break;
               case 42:
                  if (curChar == 45)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 43:
                  if (curChar == 48)
                     { jjCheckNAdd(44); }
                  break;
               case 44:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 45:
                  if (curChar == 45)
                     { jjCheckNAdd(46); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(46, 47); }
                  break;
               case 47:
                  if (curChar == 32)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 48:
                  if (curChar == 48)
                     { jjCheckNAdd(49); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x7f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x7f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if (curChar == 39 && kind > 105)
                     kind = 105;
                  break;
               case 57:
                  if ((0x6000000000000L & l) != 0L)
                     { jjCheckNAdd(49); }
                  break;
               case 58:
                  if (curChar == 49)
                     { jjAddStates(27, 29); }
                  break;
               case 59:
                  if (curChar == 48)
                     { jjCheckNAdd(45); }
                  break;
               case 60:
                  if (curChar == 49)
                     { jjCheckNAdd(45); }
                  break;
               case 61:
                  if (curChar == 50)
                     { jjCheckNAdd(45); }
                  break;
               case 62:
                  if ((0xe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(42); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAdd(17); }
                  break;
               case 1:
                  { jjAddStates(8, 10); }
                  break;
               case 6:
               case 9:
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 19:
                  { jjAddStates(30, 31); }
                  break;
               case 22:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x14400040000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 25:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(8, 10); }
                  break;
               case 6:
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(30, 31); }
                  break;
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 64 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   22, 25, 26, 27, 38, 40, 41, 62, 1, 2, 4, 8, 9, 10, 11, 29, 
   30, 34, 35, 36, 37, 43, 44, 58, 48, 49, 57, 59, 60, 61, 19, 20, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\75\75", "\41\75", "\74", 
"\76", "\74\75", "\76\75", "\174\174", "\46\46", "\41", "\136", "\57", "\52", "\53", 
"\55", "\50", "\51", "\173", "\175", "\73", "\54", "\75", "\55\55\174\53\53", "\100", 
"\72", "\56", "\123\111", "\123\111\116\117", 
"\123\105\114\105\103\103\111\117\116\101", "\103\101\123\117", "\104\105\106\105\103\124\117", "\120\101\122\101", 
"\115\111\105\116\124\122\101\123", "\104\105\124\105\116\105\122", "\111\115\120\122\111\115\111\122", 
"\106\105\103\110\101", "\106\105\103\110\101\137\110\117\122\101", "\103\117\116\124\101\122", 
"\102\101\103\113\125\120", "\125\123\121\114\104\125\115\120", "\103\117\115\120\114\105\124\117", 
"\122\105\123\124\101\125\122\101\122", "\104\105\103\114\101\122\101\122", "\104\105\116\105\107\101\122", 
"\117\124\117\122\107\101\122", "\123\105\114\105\103\103\111\117\116\101\122", "\102\117\122\122\101\122", 
"\117\122\104\105\116\101\122", "\120\117\122", "\101\107\122\105\107\101\122", "\121\125\111\124\101\122", 
"\101\103\124\125\101\114\111\132\101\122", "\111\116\123\105\122\124\101\122", "\105\116", "\104\117\116\104\105", 
"\126\101\114\117\122\105\123", "\101\114\124\105\122\101\122", "\125\123\101\122", 
"\125\123\125\101\122\111\117", "\122\105\124\117\122\116\117", "\106\125\116\103\111\117\116", 
"\120\122\117\103\105\104\111\115\111\105\116\124\117", "\117\102\112\105\103\124\117", "\102\101\123\105\137\104\101\124\117\123", 
"\124\101\102\114\101", "\103\122\105\101\122", 
"\114\154\141\166\145\137\120\162\151\155\141\162\151\141", "\101\165\164\157\151\156\143\162\145\155\145\156\164\141\142\154\145", 
"\114\154\141\166\145\137\106\157\162\141\156\145\141", "\116\157\40\116\165\154\157", "\116\165\154\157", 
"\103\117\114\117\103\101\122", "\160\141\163\163\167\157\162\144", "\103\101\115\102\111\101\122", 
"\105\114\111\115\111\116\101\122", "\101\123\103\174\104\105\123\103", "\104\105", 
"\120\105\122\115\111\123\117\123", "\102\117\117\114", "\143\141\162\141\143\164\145\162", 
"\111\116\124\105\107\105\122", "\124\105\130\124\40", "\104\117\125\102\114\105", "\126\101\103\111\117", 
"\104\101\124\105", "\104\101\124\105\124\111\115\105", null, null, "\146\141\154\163\157", 
"\166\145\162\144\141\144\145\162\157", null, null, null, null, null, null, null, null, null, null, "\74\74", 
"\76\76", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public SintacticoTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public SintacticoTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 64; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x1a37bfffffffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[64];
    private final int[] jjstateSet = new int[2 * 64];

    
    protected char curChar;
}
