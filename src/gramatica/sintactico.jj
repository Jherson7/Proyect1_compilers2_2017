options {
//LOOKAHEAD=1;
STATIC = false;
IGNORE_CASE=true;

} 

PARSER_BEGIN(Sintactico)
package gramatica;
import ArbolAST.Nodo;
import javax.swing.JOptionPane;


public class Sintactico{
public static Nodo root=null;

 public Nodo retornarArbol(){
 	return root;
 }
 public static void main(String args[]) throws ParseException 
 	{ 
		try{
			Sintactico miParser = new Sintactico(System.in); 
		    root = miParser .Inicio();
		    JOptionPane.showMessageDialog(null, "Parseo Correcto", "COMPI2", 1);
		}catch(ParseException e){
			System.out.println("Error al parsear, "+e.getMessage());
			JOptionPane.showMessageDialog(null, "Parseo INCORRECTO", "COMPI2", 0);
		}
		
 	} 
} 
PARSER_END(Sintactico)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMENTARIOS */

SKIP :
{
<SINGLE_LINE_COMMENT: "#" ( ~["\n","\r"] )* ("\n" | "\r" | "\r\n") >
|
  <MULTI_LINE_COMMENT: "#*" ( ~["*"] | ("*")+ ~["*","#"] )* ("*")+ "#" >
}




/*Operadores relacional*/
TOKEN:
{
 <IIG: "==">
|<NOIG: "!=">
|<MENOR: "<">
|<MAYOR: ">">
|<MENORI: "<=">
|<MAYORI: ">=">
}
/*Operadores logicos*/
TOKEN:
{
 <OR: "||">
|<AND: "&&">
|<NOT: "!">
}
/*operadores aritmeticos*/
TOKEN:
{
 <potencia:"^">
|<div:"/">
|<mult:"*">
|<mas: "+">
|<menos: "-">
|<apar: "(">
|<cpar: ")">
|<alla: "{">
|<clla: "}">
|<ptc: ";">
|<coma: ",">
|<ASIG: "=">
|<aumentos: "--|++">
|<key:"@">
|<dosp:":">
|<punto:".">
}


/*PALABRAS RESERVADAS*/
TOKEN:
{
	 <SI: "SI">
	|<SINO: "SINO">
	|<SELECCIONA: "SELECCIONA">
	|<CASO: "CASO">
	|<OBJECTO: "OBJETO">
	|<DEFECTO: "DEFECTO">
	|<PARA: "PARA">
	|<MIENTRAS: "MIENTRAS">
	|<DETENER: "DETENER">
	|<IMPRIMIR: "IMPRIMIR">
	|<FECHA: "FECHA">
	|<FECHA_HORA: "FECHA_HORA">
	|<CONTAR: "CONTAR">
	|<BACKUP: "BACKUP">
	|<USQLDUMP: "USQLDUMP">
	|<COMPLETO: "COMPLETO">
	|<RESTAURAR: "RESTAURAR">
	|<DECLARAR: "DECLARAR">
	|<DENEGAR: "DENEGAR">
	|<OTORGAR: "OTORGAR">
	|<SELECCIONAR: "SELECCIONAR">
	|<BORRAR: "BORRAR">
	|<ORDENAR: "ORDENAR">
	|<POR: "POR">
	|<AGREGAR: "AGREGAR">
	|<QUITAR: "QUITAR">
	|<ACTUALIZAR: "ACTUALIZAR">
	|<INSERTAR: "INSERTAR">
	|<EN: "EN">
	|<DONDE: "DONDE">
	|<VALORES: "VALORES">
	|<ALTERAR: "ALTERAR">
	|<USAR: "USAR">
	|<USUARIO: "USUARIO">
	|<RETORNO: "RETORNO">
	|<FUNCION: "FUNCION">
	|<PROCEDIMIENTO: "PROCEDIMIENTO">
	|<BASE_DATOS :"BASE_DATOS">
	|<TABLA : "TABLA">
	|<CREAR: "CREAR">
	|<PK:"Llave_Primaria">
	|<AUTO_INCREMENT: "Autoincrementable">
	|<FK:"Llave_Foranea">
	|<NOT_NULL:"No Nulo">
	|<NULO:"Nulo">
	|<COLOCAR:"COLOCAR">
	|<PASS:"password">
	|<CAMBIAR:"CAMBIAR">
	|<ELIMINAR:"ELIMINAR">
	|<ORDER:"ASC|DESC">
	|<DE:"DE">
	|<PERMISOS:"PERMISOS">
	|<UNICO:"UNICO">
}

/* PALABRAS RESERVADAS */

TOKEN :
{
  < BOOL: "BOOL" >
| < CHAR: "caracter" >
| < INTEGER: "INTEGER" >
| < TEXT : "TEXT " >
| < DOUBLE: "DOUBLE" >
| < VACIO: "VACIO">
| < DATE: "DATE">
| < DATETIME: "DATETIME">


}

/*EXPRESIONES REGULARES*/
TOKEN :
{
  < NUM: <DECIMAL_LITERAL >>
| < #DECIMAL_LITERAL: ["0"-"9"] (["0"-"9"])*(["."](["0"-"9"])*)? >
| <FALSE: "falso">
| <TRUE: "verdadero">
| < IDEN: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* >


| <DATE_EXP: "'" <DIA>["-"] <MES> ["-"] <ANIO> "'">
| <#DIA: ((["0"])?["1"-"9"]|["1"-"3"]["0"-"9"])>
| <#MES: ((["0"])?["1"-"9"]|"10"|"11"|"12")>
| <#ANIO:  (["0"-"9"])+>
| <DATE_TIME_EXP: "'" <DIA>["-"] <MES> ["-"] <ANIO> " " <HOUR> "'">
| <#HOUR: (((["0"])?["0"-"9"]|["1"-"2"]["0"-"9"])":"(["0"-"6"]["0"-"9"])":"(["0"-"6"]["0"-"9"]))>
| <CARACTER: <VAL_CARAC> >
| < #VAL_CARAC: "'" (("^"["n","t","r","^","'","\""])|(~["\\","\n","\t","\r","'"]))+"'"  >
| <CADENA: "\""(~["\"","\n","\t"])* "\"">
}



Nodo Inicio():
{Nodo raiz,sent;}
{ 
   {raiz= new Nodo("INICIO",0,0);}
   (sent=Sentencias_Padre() {raiz.hijos.addLast(sent);} )* <EOF>
   {return raiz;}
  
}

Nodo Sentencias_Padre():
{Nodo raiz,parametros,aux; Token v,i,f;}
{
   i=<CREAR>  raiz = Sentencias_Crear()  	{raiz.setInicio(i.beginLine); return raiz;}
 | i=<USAR> v=<IDEN> f=<ptc>  				{raiz =new Nodo("USAR",v.beginLine,v.beginColumn,v.image); raiz.setInicio(i.beginLine); raiz.setFin(f.beginLine); return raiz;}
 | v=<IDEN> <apar> 
	  
	 	{	raiz=new Nodo("CALL_FUN",v.beginLine,v.beginColumn,v.image);
	 	  	parametros=new Nodo("PARAMETROS",0,0); }
				
	    (aux=Rel_Or(){parametros.hijos.addLast(aux);}
		(<coma> aux=Rel_Or(){parametros.hijos.addLast(aux);})* {raiz.hijos.addLast(parametros);} )?
		
	<cpar> 
  		<ptc>	{raiz.setInicio(v.beginLine); raiz.setFin(v.beginColumn); return raiz;} //raiz = Llamada_funcion() 
}

Nodo Sentencias_Crear():
{Nodo raiz,sent,atr; Token v,f;}
{
     <BASE_DATOS> v=<IDEN>  f=<ptc>  { raiz = new Nodo("BASE_DATOS",v.beginLine,v.beginColumn,v.image); raiz.setFin(f.beginLine); return raiz;}
    |v=<TABLA> 		 		raiz = Sentencias_Tabla()   			f=<ptc> { raiz.setFin(f.beginLine); return raiz;}
    |v=<USUARIO> 		 	raiz = Crear_Usuario() 					f=<ptc> { raiz.setFin(f.beginLine); return raiz;}
    |v=<PROCEDIMIENTO> 		raiz = Sentencias_Procedimiento()        		{ return raiz;}
    |v=<FUNCION>	     	raiz = Sentencias_Funcion() 			  		{ return raiz;}
    |  <OBJECTO> v=<IDEN> 

      <apar> 

     { raiz = new Nodo("OBJECTO",v.beginLine,v.beginColumn,v.image); }
     { atr = new Nodo("ATRIBUTOS",v.beginLine,v.beginColumn); }
     (sent = Sentencias_Objeto(){atr.hijos.addLast(sent);} (<coma>sent = Sentencias_Objeto(){atr.hijos.addLast(sent);})*)+ 
     <cpar> f=<ptc> 
    
    {   raiz.hijos.addLast(atr);
    	raiz.setFin(f.beginLine);
    	return raiz;
    } 

}

Nodo Crear_Usuario():
{Token a,b;}
{
	a=<IDEN> <COLOCAR> <PASS> <ASIG> b=<CADENA>
	{return new Nodo("CREAR_USER",a.beginLine,a.beginColumn,a.image,b.image);}
}

Nodo Sentencias_Tabla():
{Nodo raiz,sent,atributos; Token v,f;}
{
     v=<IDEN> {raiz=new Nodo("TABLA",v.beginLine,v.beginColumn,v.image);}
     {atributos=new Nodo("ATRIBUTOS",0,0);}
      
      <apar> sent = Atributos_Tabla() {atributos.hijos.addLast(sent);}
     
     (<coma> sent = Atributos_Tabla() {atributos.hijos.addLast(sent);})* 
     
      <cpar>
	
	{
     raiz.hijos.addLast(atributos);
	 return raiz;
	}
}



Nodo Atributos_Tabla():
{Nodo raiz,features,aux, tipo; Token t;}
{ 
	 {features = new Nodo("FEATURES",0,0);}
	 tipo=Tipo_Var() t=<IDEN> { raiz= new Nodo("ATRIBUTO_TABLA",t.beginLine,t.beginColumn,tipo,t.image); }

	 						 (aux=Caracteristicas(){features.hijos.addLast(aux);})* 
	 {
	 	raiz.hijos.addLast(features);
	 	return raiz;
	 }
}

Nodo Caracteristicas():
{Token v,t;}
{
	//ARREGLAR EL FOREING KEY
     <FK> v=<IDEN> t=<IDEN>	{return new Nodo("FK",v.beginLine,v.beginColumn,v.image,t.image);}
   | v=<PK> 				{return new Nodo("PK",v.beginLine,v.beginColumn,v.image);}
   | v=<AUTO_INCREMENT> 	{return new Nodo("AUTO_INCREMENT",v.beginLine,v.beginColumn,v.image);}
   | v=<NOT_NULL> 			{return new Nodo("NOT NULL",v.beginLine,v.beginColumn,v.image);}
   | v=<NULO>				{return new Nodo("NULL",v.beginLine,v.beginColumn,v.image);}
   | v=<UNICO>				{return new Nodo("UNICO",v.beginLine,v.beginColumn,v.image);}
}


Nodo Sentencias_Procedimiento()://metodo para crear procedimiento
{Nodo raiz,parametros,p,sentencias;Token t,f;}
{
	{parametros= new Nodo("PARAMETROS",0,0);}
	{sentencias= new Nodo("SENTENCIAS",0,0);}
	t=<IDEN> {raiz=new Nodo("PROCEDIMIENTO",t.beginLine,t.beginColumn,t.image);}
	<apar> 
	(p=Parametros(){parametros.hijos.addLast(p);}(<coma>p=Parametros(){parametros.hijos.addLast(p);})* {raiz.hijos.addLast(parametros);})? 
		    
    <cpar> 
    <alla>(p= Sentencias_Usql() {sentencias.hijos.addLast(p);})+ f=<clla>
	
	{
	 	raiz.hijos.addLast(sentencias);
	 	raiz.setFin(f.beginLine);
	 	return raiz;
	 }
}

Nodo Sentencias_Funcion()://metodo para crear procedimiento
{Nodo raiz,parametros,p,sentencias,tipo;Token t,f;}
{
	{parametros= new Nodo("PARAMETROS",0,0);}
	{sentencias= new Nodo("SENTENCIAS",0,0);}
	t=<IDEN> {raiz=new Nodo("FUNCION",t.beginLine,t.beginColumn,t.image);}
	<apar> 
	(p=Parametros(){parametros.hijos.addLast(p);}(<coma>p=Parametros(){parametros.hijos.addLast(p);})* {raiz.hijos.addLast(parametros);})? 
    <cpar> tipo=Tipo_Var()
    <alla>(p= Sentencias_Usql() {sentencias.hijos.addLast(p);})+ f=<clla>
	
	{
	 	raiz.hijos.addLast(tipo);
	 	raiz.hijos.addLast(sentencias); 
	 	raiz.setFin(f.beginLine);
	 	return raiz;
	 }
}



Nodo Parametros():
{Nodo raiz,aux;Nodo tipo; Token t;}
{ 
	 tipo=Tipo_Var() <key> t=<IDEN> 
	 {
	 	raiz=new Nodo("PARAMETRO",t.beginLine,t.beginColumn);
	 	raiz.hijos.addLast(tipo);
	 	raiz.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));
	 	return raiz;
	 }
}


Nodo Sentencias_Usql():
{Nodo sent; Token t;}
{
	  sent= Ciclo_While()      											{return sent;}
	| sent= Ciclo_For()     											{return sent;}
	| sent= Imprimir()     												{return sent;}
	| sent= Llamada_funcion()     										{return sent;}
	| sent= Retornar()			<ptc>      								{return sent;}
	| sent= Declaracion()		<ptc>      								{return sent;}
	| sent= Asignacion()		<ptc>      								{return sent;}
	| sent= Contar()			<ptc>      								{return sent;}
	| <ALTERAR> 			    sent=Alterar() 					<ptc>   {return sent;}
	| <DETENER>  			   	{sent=new Nodo("DETENER",token.beginLine,token.beginColumn);} {return sent;}
	| <ELIMINAR> 				sent= Sentencias_Eliminar()		<ptc>	{return sent;} 
	| <INSERTAR> <EN> <TABLA> 	sent= Sentencias_Insertar()		<ptc>	{return sent;} 
	| <ACTUALIZAR> <TABLA>		sent= Sentencias_Actualizar()	<ptc>	{return sent;} 
	| <BORRAR> <EN> <TABLA> 	sent= Sentencias_Borrar()		<ptc> 	{return sent;}
	| <SELECCIONAR> 			sent= Sentencias_Seleccionar()	<ptc> 	{return sent;}
	| <OTORGAR> <PERMISOS>		sent= Sentencias_Permisos()		<ptc> 	{return sent;}
	| <DENEGAR> <PERMISOS>		sent= Sentencias_Denengar()		<ptc> 	{return sent;}
	| <BACKUP>					sent= Sentencias_Backup()		<ptc> 	{return sent;}
	| <RESTAURAR> 				sent= Sentencias_Restaurar()	<ptc> 	{return sent;}
}


Nodo Sentencias_Backup():
{Nodo raiz; Token a,b;}
{
	<USQLDUMP> a=<IDEN> b=<IDEN>
	{raiz= new Nodo("BACKUP_USQL",a.beginLine,a.beginColumn,a.image,b.image); return raiz;}
	|

	<COMPLETO> a=<IDEN> b=<IDEN>
	{raiz= new Nodo("BACKUP_COMPLETO",a.beginLine,a.beginColumn,a.image,b.image); return raiz;}

	
}


Nodo Sentencias_Restaurar():
{Nodo raiz; Token a,b;}
{
	<USQLDUMP> a=<IDEN> b=<IDEN>
	{raiz= new Nodo("RESTORE_USQL",a.beginLine,a.beginColumn,a.image,b.image); return raiz;}
	|

	<COMPLETO> a=<IDEN> b=<IDEN>
	{raiz= new Nodo("RESTORE_COMPLETO",a.beginLine,a.beginColumn,a.image,b.image); return raiz;}

}


Nodo Contar():
{Nodo raiz,r;Token v;}
{
	v=<CONTAR> 
	<apar> 
	"<<"
	<SELECCIONAR> r= Sentencias_Seleccionar()
	">>"
	<cpar>
	
	{raiz = new Nodo("CONTAR",v.beginLine,v.beginColumn);
	 raiz.hijos.addLast(r);
	 return raiz;
	}
}


Nodo Sentencias_Denengar():
{Nodo raiz; Token user,bd,obj;}
{
	user=<IDEN> <coma> bd=<IDEN> <punto>(obj=<IDEN>|obj=<mult>)
	{raiz = new Nodo("DENEGAR",user.beginLine,user.beginColumn,user.image,bd.image);
	 raiz.hijos.addLast(new Nodo(obj.image,obj.beginLine,obj.beginColumn));
	 return raiz;
	}
}


Nodo Sentencias_Permisos():
{Nodo raiz; Token user,bd,obj;}
{
	user=<IDEN> <coma> bd=<IDEN> <punto>(obj=<IDEN>|obj=<mult>)
	{raiz = new Nodo("OTORGAR",user.beginLine,user.beginColumn,user.image,bd.image);
	 raiz.hijos.addLast(new Nodo(obj.image,obj.beginLine,obj.beginColumn));
	 return raiz;
	}
}



Nodo Sentencias_Seleccionar():
{Nodo raiz,l_campos,l_tablas,r;Token v;}
{
   
	{l_tablas = new Nodo("lista_tablas",0,0);}
	{raiz = new Nodo("SELECCIONAR_*",0,0);}
    <mult> <DE> v=<IDEN> {l_tablas.hijos.addLast(new Nodo(v.image,v.beginLine,v.beginColumn));}
    (<coma> v=<IDEN>{l_tablas.hijos.addLast(new Nodo(v.image,v.beginLine,v.beginColumn));})* 
    {raiz.hijos.addLast(l_tablas);}
    (<DONDE> r=Rel_Or(){raiz.hijos.addLast(r);})?
	{return raiz;}

   |
     {raiz = new Nodo("SELECCIONAR",0,0);}
     {l_campos = new Nodo("lista_campos",0,0);}
     {l_tablas = new Nodo("lista_tablas",0,0);}

     r=Llamada_funcion() {l_campos.hijos.addLast(r);}

     (<coma> r=Llamada_funcion(){l_campos.hijos.addLast(r);})* 

     <DE> v=<IDEN> {l_tablas.hijos.addLast(new Nodo(v.image,v.beginLine,v.beginColumn));}

     (<coma> v=<IDEN>{l_tablas.hijos.addLast(new Nodo(v.image,v.beginLine,v.beginColumn));})* 

     {raiz.hijos.addLast(l_campos); raiz.hijos.addLast(l_tablas);}

     (<DONDE> r=Rel_Or(){raiz.hijos.addLast(r);})?
    
    {return raiz;}
}


Nodo Sentencias_Borrar():
{Nodo raiz,r; Token t,v;}
{
    t= <IDEN> {raiz = new Nodo("BORRAR",t.beginLine,t.beginColumn,t.image);}
	(<DONDE> r=Rel_Or() {raiz.hijos.addLast(r);})?//DONDE 
	{return raiz;}
}



Nodo Sentencias_Insertar():
{Nodo raiz,r,atr,atr2; Token t;}
{
	 {atr=new Nodo	("ATRIBUTOS",0,0);}
	 t=<IDEN> {raiz = new Nodo("INSERTAR",t.beginLine,t.beginColumn,t.image);}
	 
	 <apar> 
	 r=Rel_Or(){atr.hijos.addLast(r);} 
	   (<coma> r=Rel_Or(){atr.hijos.addLast(r);} )* 
	 <cpar> 

	 {raiz.hijos.addLast(atr);}

	 ({atr2=new Nodo("ATRIBUTOS",0,0); }
	 	<VALORES> 
	 	<apar>  
	 	  r=Rel_Or()			{atr2.hijos.addLast(r);} 
	 	  (<coma> r=Rel_Or()    {atr2.hijos.addLast(r);} )*  
	 	 <cpar>  
	 	{raiz.hijos.addLast(atr2); raiz.nombre="INSERTAR_ESPECIAL";} 
	 )?

	 {return raiz;}
}

Nodo Sentencias_Actualizar():
{Nodo raiz,r,atr,atr2; Token t;}
{
	{atr=new Nodo	("ATRIBUTOS",0,0);}
    {atr2=new Nodo	("ATRIBUTOS",0,0);}
	t=<IDEN> {raiz = new Nodo("ACTUALIZAR_TABLA",t.beginLine,t.beginColumn,t.image);}
	 <apar>
	  	t=<IDEN> {atr.hijos.add(new Nodo(t.image,t.beginLine,t.beginColumn));} 
	  	(<coma> t=<IDEN	>{atr.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));} )*
	 <cpar> 
	 <VALORES>
	 <apar>
	 	r=Rel_Or(){atr2.hijos.addLast(r);} 
	   (<coma> r=Rel_Or(){atr2.hijos.addLast(r);} )* 
	 <cpar>
	 
	 {raiz.hijos.addLast(atr);
	  raiz.hijos.addLast(atr2);
	 }	
	 (<DONDE> r=Rel_Or() {raiz.hijos.addLast(r);})?//DONDE preguntar si tiene un hijo mas
	 {return raiz;}
}


Nodo Alterar():
{Nodo raiz,r; Token t,v;}
{
	 <TABLA>   t=<IDEN> r=Alterar_Tabla() {raiz= new Nodo("ALTERAR_TABLA",t.beginLine,t.beginColumn,t.image);
										   raiz.hijos.addLast(r);  return raiz;}

   	|<OBJECTO> t=<IDEN> r=Alterar_Objeto(){raiz= new Nodo("ALTERAR_OBJETO",t.beginLine,t.beginColumn,t.image);
										   raiz.hijos.addLast(r);  return raiz;}

	|<USUARIO> v=<IDEN>  <CAMBIAR> <PASS> <ASIG> t=<TEXT> {raiz= new Nodo("ALTERAR_USUARIO",t.beginLine,t.beginColumn,v.image);
										   				   raiz.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));}		

   	{return raiz;}		  
}

Nodo Alterar_Tabla():
{Nodo raiz,atributos,aux; Token t;}
{
	 {atributos=new Nodo("ATRIBUTOS",0,0);}
	 <AGREGAR> 	<apar> aux=Atributos_Tabla(){atributos.hijos.addLast(aux);}
	 				   (<coma>aux = Atributos_Tabla(){atributos.hijos.addLast(aux);})*
	 			<cpar>
	 			{raiz=new Nodo("AGREGAR",token.beginLine,token.beginColumn); raiz.hijos.add(atributos); return raiz;}
	|{atributos=new Nodo("ATRIBUTOS",0,0);}
	 <QUITAR>  t=<IDEN> {atributos.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));}
				(<coma> t=<IDEN> {atributos.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));})*
			    {raiz=new Nodo("QUITAR",token.beginLine,token.beginColumn); raiz.hijos.add(atributos);}

	{return raiz;}
}

Nodo Alterar_Objeto():
{Nodo raiz,atributos,aux; Token t;}
{
	 {atributos=new Nodo("ATRIBUTOS",0,0);}
	 <AGREGAR> 	<apar> aux=Sentencias_Objeto(){atributos.hijos.addLast(aux);}
	 				   (<coma>aux = Sentencias_Objeto(){atributos.hijos.addLast(aux);})*
	 			<cpar>
	 			{raiz=new Nodo("AGREGAR",token.beginLine,token.beginColumn); raiz.hijos.add(atributos);}
	 {return raiz;}

	|{atributos=new Nodo("ATRIBUTOS",0,0);}
	 <QUITAR>  t=<IDEN> {atributos.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));}
				(<coma> t=<IDEN> {atributos.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));})*
			    {raiz=new Nodo("QUITAR",token.beginLine,token.beginColumn); raiz.hijos.add(atributos);}

	{return raiz;}
}


Nodo  Sentencias_Eliminar():
{Nodo raiz; Token t;}
{
	 <OBJECTO> 		t=<IDEN> {raiz= new Nodo("ELIMINAR_OBJ",t.beginLine,t.beginColumn,t.image);   return raiz;}
	|<TABLA> 		t=<IDEN> {raiz= new Nodo("ELIMINAR_TABLA",t.beginLine,t.beginColumn,t.image); return raiz;}
	|<BASE_DATOS> 	t=<IDEN> {raiz= new Nodo("ELIMINAR_BD",t.beginLine,t.beginColumn,t.image);    return raiz;}
	|<USUARIO> 		t=<IDEN> {raiz= new Nodo("ELIMINAR_USER",t.beginLine,t.beginColumn,t.image);  return raiz;}
}

Nodo Retornar():
{Nodo raiz,aux; Token t;}
{
	t=<RETORNO> aux=Rel_Or() {raiz=new Nodo("RETORNO",aux);}
	{return raiz;}
}


Nodo Llamada_funcion():
{Nodo raiz,parametros,aux;Token t,v;}
{
	
	t=<IDEN>  raiz= auxFun(t.image,t.beginLine,t.beginColumn) {return raiz;}

}

Nodo auxFun(String nombre,int fila,int columna):
{Token v,t;Nodo raiz,parametros,aux,acceso;}
{
	 <punto> v=<IDEN> 
	 
	 {raiz= new Nodo("ACCESO_OBJETO",fila,columna,nombre);
	  acceso = new Nodo("hijos",0,0);
	  acceso.hijos.addLast(new Nodo(v.image,v.beginLine,v.beginColumn));
	}
	 
	 (<punto> t=<IDEN> {acceso.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));} )*
	 { raiz.hijos.addLast(acceso); return raiz;}

	|<apar> 
	  
	 	{	raiz=new Nodo("CALL_FUN",fila,columna,nombre);
	 	  	parametros=new Nodo("PARAMETROS",0,0); }
				
	    (aux=Rel_Or(){parametros.hijos.addLast(aux);}
		(<coma> aux=Rel_Or(){parametros.hijos.addLast(aux);})* {raiz.hijos.addLast(parametros);} )?
		
	<cpar> 
	{return raiz;}
	| {return new Nodo("ID_ATR",fila,columna,nombre);}
}

Nodo Ciclo_While():
{Nodo raiz,aux;Token t;}
{
	t=<MIENTRAS>  {raiz= new Nodo("WHILE",t.beginLine,t.beginColumn);}
	<apar> aux=Rel_Or(){raiz.hijos.addLast(aux);} <cpar> 
	<alla> 
		(aux=Sentencias_Usql(){raiz.hijos.addLast(aux);})*
	<clla>

	{return raiz;}
}

Nodo Ciclo_For():
{Nodo raiz,aux;Token t;}
{
	t=<PARA>  {raiz= new Nodo("PARA",t.beginLine,t.beginColumn);}
	<apar> 
	aux=Declaracion(){raiz.hijos.addLast(aux);} <ptc>
	aux=Rel_Or(){raiz.hijos.addLast(aux);} <ptc>
	t= <aumentos>{raiz.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));}
	<cpar> 
	<alla> 
		(aux=Sentencias_Usql(){raiz.hijos.addLast(aux);})*
	<clla>

	{return raiz;}
}

Nodo Ciclo_Selecciona():
{Nodo raiz,aux;Token t;}
{
	t=<SELECCIONA>  {raiz= new Nodo("SELECCIONA",t.beginLine,t.beginColumn);}
	<apar> 
	aux=Rel_Or()				{raiz.hijos.addLast(aux);} 
	<cpar> 
	<alla> 
		(aux=Casos()			{raiz.hijos.addLast(aux);})+
		(aux=Defecto()			{raiz.hijos.addLast(aux);})?
	<clla>

	{return raiz;}
}

Nodo Casos():
{Nodo raiz,aux,sentencias;Token t;}
{
	{sentencias= new Nodo("SENTENCIAS",0,0);}

	t=<CASO>      {raiz= new Nodo("CASO",t.beginLine,t.beginColumn);}
	aux=Rel_Or()  {raiz.hijos.addLast(aux);}
	<dosp>
	
	(aux=Sentencias_Usql()	{sentencias.hijos.addLast(aux);})*
    
	{
		raiz.hijos.addLast(sentencias);
		return raiz;
	}
}

Nodo Defecto():
{Nodo raiz,aux,sentencias;Token t;}
{
	{sentencias= new Nodo("SENTENCIAS",0,0);}

	t=<DEFECTO>      {raiz= new Nodo("DEFECTO",t.beginLine,t.beginColumn);}
	<dosp>
	(aux=Sentencias_Usql(){sentencias.hijos.addLast(aux);})*
	{
		raiz.hijos.addLast(sentencias);
		return raiz;
	}
}

Nodo IF():
{Nodo raiz,aux,sentencias;Token t;}
{
	{sentencias= new Nodo("SENTENCIAS",0,0);}

	t=<SI>      	{raiz= new Nodo("SI",t.beginLine,t.beginColumn);}
	<apar> 
		aux=Rel_Or()	{raiz.hijos.addLast(aux);} 
	<cpar> 
	<alla>
	  (aux=Sentencias_Usql(){sentencias.hijos.addLast(aux);})*
	  {raiz.hijos.addLast(sentencias);} 
	<clla>
	<SINO>
	<alla>
		{sentencias= new Nodo("SENTENCIAS",0,0);}
		(aux=Sentencias_Usql(){sentencias.hijos.addLast(aux);})*
		{raiz.hijos.addLast(sentencias);}
	<clla>

	{
		return raiz;
	}
}

Nodo Imprimir():
{Nodo raiz,sent; Token t,f;}
{
	t=<IMPRIMIR> <apar> Rel_Or() f=<cpar>
	{ raiz = new Nodo("IMPRIMIR",t.beginLine,t.beginColumn); raiz.setInicio(t.beginLine); raiz.setFin(f.beginLine);}
	{return raiz;}
}


Nodo Sentencias_Objeto():
{Nodo raiz, tipo;Token t;}
{
      tipo=Tipo_Var() t=<IDEN> 
    { raiz= new Nodo("ATRIBUTO_OBJETO",t.beginLine,t.beginColumn,tipo,t.image); }

    {return raiz;} 
}


Nodo Asignacion():
{Nodo raiz,r; Token a,b;}
{
	<key> a=<IDEN> (<ASIG> r=Rel_Or() {raiz=new Nodo("ASIGNACION",a.beginLine,a.beginColumn,a.image);
	 								   raiz.hijos.addLast(r); }

 	|<punto> b=<IDEN> <ASIG> r=Rel_Or()
		            	{raiz=new Nodo("ASIGNACION_OBJETO",a.beginLine,a.beginColumn,a.image,b.image);
	 					 raiz.hijos.addLast(r); }
		            ) 
	
	 {return raiz;}
	
}

Nodo Declaracion():
{Nodo raiz,variables,aux, tipo;Token t;}
{
     
	 {variables=new Nodo("Lista_Variables",0,0);}

     t=<DECLARAR> aux=Variables(){variables.hijos.addLast(aux);}
     (<coma> aux=Variables(){variables.hijos.addLast(aux);})* 
     
     tipo=Tipo_Var() 
     {
     	raiz=new Nodo("DECLARAR",t.beginLine,t.beginColumn);
     	if(tipo.nombre=="ID")
     		raiz.nombre="INSTANCIAR";
     	raiz.hijos.addLast(tipo);
     	raiz.hijos.addLast(variables);
     	
 	 }
 	 (<ASIG> aux= Rel_Or() {raiz.hijos.addLast(aux);})?

     {return raiz;} 
}

Nodo Variables(): 
{Token v;}
{

   <key> v=<IDEN> {return new Nodo(v.image,v.beginLine,v.beginLine);}
}

Nodo Rel_Or():
{Nodo uno,dos,raiz;}
{
    raiz= Rel_And() 
    			  ( <OR> uno=Rel_And(){dos=raiz; raiz= new Nodo ( "OR",dos,"||",uno);} )*
    {return raiz;}
}


Nodo Rel_And():
{Nodo uno,dos,raiz;}
{
    raiz= Rel_Not() 
    			  ( <AND> uno=Rel_Not(){dos=raiz; raiz= new Nodo ( "AND",dos,"&&",uno);})*
    {return raiz;}
}


Nodo Rel_Not():
{Nodo uno,dos,raiz;}
{
      
     <NOT> uno= Rel_Not()      {raiz = new Nodo("NOT",uno); return raiz;}
    |raiz= Relacional()  		{return raiz;}
    
}


Nodo Relacional():
{Nodo uno,dos,raiz,rel;String t;}
{
	
	raiz=Operacion() ( t=operadores_rel() /*{rel=new Nodo("OPE_REL",token.beginLine,token.beginLine, t);} */ uno=Operacion() 
					   { dos = raiz; raiz=new Nodo("COND",dos,t,uno);}
			   		 )* 
	{return raiz;}
}	


String operadores_rel():
{}{
	 <IIG>		{return  token.image.toString();}
	|<MENORI>	{return  token.image.toString();}
	|<MAYORI>	{return  token.image.toString();}
	|<MENOR>	{return  token.image.toString();}
	|<MAYOR>	{return  token.image.toString();}
	|<NOIG>		{return  token.image.toString();}

}

Nodo Operacion():
{Nodo raiz,uno,dos;}
{
   raiz= Multiplica() (  <mas>   uno= Multiplica() 	  { dos = raiz; raiz=new Nodo("MAS",dos ,"+",uno); }//
    			  	   | <menos> uno= Multiplica()    { dos = raiz; raiz=new Nodo("MENOS",dos ,"-",uno); } )*
  {return raiz;}
}

Nodo Multiplica():
{Nodo raiz,uno,dos;}
{
   
    raiz=Potencia() ( <mult> uno=Potencia() { dos = raiz; raiz=new Nodo("POR",dos ,"*",uno); }//raiz.hijos.add(dos); raiz.hijos.add(uno); } 
    				 |<div> uno= Potencia() { dos = raiz; raiz=new Nodo("DIV",dos ,"/",uno); })*
 {return raiz;}
}

Nodo Potencia():
{Nodo raiz,uno,dos;}
{
	raiz=Expresion() (<potencia> uno= Expresion(){dos = raiz; raiz=new Nodo("EXP",dos,"^",uno);})* //token.beginLine,token.beginColumn); raiz.hijos.add(dos); raiz.hijos.add(uno);})*
	{return raiz;}
}

/*
Nodo Unario():
{Nodo raiz,r;}
{
    <menos> r=Rel_Or() {}
   | raiz = Expresion() {return raiz;}
}*/




Nodo Expresion(): 
{Nodo r,s,v;Token t;}
{
	  <key> t=<IDEN> 		{return new Nodo("ID",t.beginLine,t.beginColumn,t.image);}
	| <menos> r=Expresion()	{return new Nodo("UNARIO",r);}
	| t=<DATE_EXP>  		{return new Nodo("DATE",t.beginLine,t.beginColumn,t.image);}
	| t=<DATE_TIME_EXP> 	{return new Nodo("DATE TIME",t.beginLine,t.beginColumn,t.image);}
	| t=<NUM> 				{return new Nodo("NUM",t.beginLine,t.beginColumn,t.image);}
  	| t=<FALSE> 			{return new Nodo("FALSE",t.beginLine,t.beginColumn,t.image);}
	| t=<TRUE>				{return new Nodo("TRUE",t.beginLine,t.beginColumn,t.image);}
  	| t=<CARACTER> 			{return new Nodo("TEXT",t.beginLine,t.beginColumn,t.image);}
 	| t=<CADENA>    		{return new Nodo("TEXT",t.beginLine,t.beginColumn,t.image);}
 	//| <NOT> uno= Rel_Not()  {raiz = new Nodo("NOT",uno); return raiz;}
	| r= Llamada_funcion()		{return r;}
 	| <apar> r=Rel_Or() <cpar>  {return r;}
}

Nodo Tipo_Var():
{String raiz;Nodo r;}
{ 
 <BOOL>					{return new Nodo("BOOL",token.beginLine,token.beginColumn);}
|<DATE>     			{return new Nodo("DATE",token.beginLine,token.beginColumn);}
|<DATETIME> 			{return new Nodo("DATETIME",token.beginLine,token.beginColumn);}
|<CHAR>					{return new Nodo("CHAR",token.beginLine,token.beginColumn);}
|<INTEGER>				{return new Nodo("INTEGER",token.beginLine,token.beginColumn);}
|<TEXT>					{return new Nodo("TEXT",token.beginLine,token.beginColumn);}
|<CARACTER> 			{return new Nodo("TEXT",token.beginLine,token.beginColumn);}
|<DOUBLE>				{return new Nodo("DOUBLE",token.beginLine,token.beginColumn);}
|<IDEN>   				{return new Nodo("ID",token.beginLine,token.beginColumn,token.image);}
|<NULO>     			{return new Nodo("NULO",token.beginLine,token.beginColumn,token.image);}

}