options {
//LOOKAHEAD=1;
STATIC = false;
} 

PARSER_BEGIN(registro_db)
package gramatica.db;
import ArbolAST.Nodo;
import javax.swing.JOptionPane;


public class registro_db{
public static Nodo root=null;

 public Nodo retornarArbol(){
 	return root;
 }
 public static void main(String args[]) throws ParseException 
 	{ 
		try{
			registro_db miParser = new registro_db(System.in); 
		    root = miParser .Inicio();
		    JOptionPane.showMessageDialog(null, "Parseo Correcto", "COMPI2", 1);
		}catch(ParseException e){
			System.out.println("Error al parsear, "+e.getMessage());
			JOptionPane.showMessageDialog(null, "Parseo INCORRECTO", "COMPI2", 0);
		}
		
 	} 
} 
PARSER_END(registro_db)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/*Palabras Reservadas*/
TOKEN:
{
 <Procedure: "<Procedure>">
|<C_Proc: "</Procedure>">
|<Obj: "<Object>">
|<C_Obj: "</Object>">
|<Tabla: "<Tabla>">
|<C_Tabla: "</Tabla>">
|<Rows: "<rows>">
|<C_Rows: "</rows>">
|<INT: "<int>">
|<BOOL: "<bool>">
|<TEXT: "<text>">
|<C_INT: "</int>">
|<C_BOOL: "</bool>">
|<C_TEXT: "</text>">
|<NOMBRE: "<nombre>">
|<C_NOMBRE: "</nombre>">
|<PATH: "<path>">
|<C_PATH: "</path>">

}

/*EXPRESIONES REGULARES*/
TOKEN :
{
  < NUM: <DECIMAL_LITERAL >>
| < #DECIMAL_LITERAL: ["0"-"9"] (["0"-"9"])*(["."](["0"-"9"])*)? >
| < IDEN: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* >
| < CADENA: (~["\"","\n","\t"," "])+ >
}


Nodo Inicio():
{Nodo raiz,r;}
{ 
   {raiz= new Nodo("registro_db",0,0);}
   (r=Sentencias()  {raiz.hijos.addLast(r);})+
   <EOF>
   {return raiz;}
  
}


Nodo Procedure():
{Nodo raiz;Token b;}
{
 <Procedure> 
 	<PATH> b=<CADENA> <C_PATH>
 <C_Proc>

 {raiz = new Nodo("PROC",b.beginLine,b.beginColumn,b.image);
  return raiz;}
}


Nodo Object_U():
{Nodo raiz;Token a;}
{
 <Obj> 
 	<PATH> a=<CADENA> <C_PATH>
 <C_Obj>

 {raiz = new Nodo("OBJETO",a.beginLine,a.beginColumn,a.image);
  return raiz;}
}

Nodo Tabla():
{Nodo raiz,r,rows;Token a,b;}
{
 {rows= new Nodo("filas",0,0);}
 <Tabla> 
 	<NOMBRE>a=<IDEN> <C_NOMBRE>
 	<PATH> b=<CADENA> <C_PATH>
 	<Rows>
 	  (r=Atributo(){rows.hijos.addLast(r);})+
 	<C_Rows>
 <C_Tabla>

 {raiz = new Nodo("Tabla",a.beginLine,a.beginColumn,a.image,b.image);
  raiz.hijos.addLast(rows);
  return raiz;}
}


Nodo Sentencias():
{Nodo raiz;}
{
	 raiz= Object_U()
	|raiz= Tabla()
	|raiz= Procedure()
{return raiz;}
}


Nodo Atributo():
{Nodo raiz;Token a,b;}
{
  a=<INT>b=<IDEN><C_INT>
 |a=<BOOL>b=<IDEN><C_BOOL>
 |a=<TEXT>b=<IDEN><C_TEXT>

 {raiz = new Nodo("ATRIBUTO",a.beginLine,a.beginColumn,a.image,b.image);
  return raiz;}
}