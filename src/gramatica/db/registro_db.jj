options {
//LOOKAHEAD=1;
STATIC = false;
IGNORE_CASE=true;
} 

PARSER_BEGIN(registro_db)
package gramatica.db;
import ArbolAST.Nodo;
import javax.swing.JOptionPane;


public class registro_db{
public static Nodo root=null;

 public Nodo retornarArbol(){
 	return root;
 }
 public static void main(String args[]) throws ParseException 
 	{ 
		try{
			registro_db miParser = new registro_db(System.in); 
		    root = miParser .Inicio();
		    JOptionPane.showMessageDialog(null, "Parseo Correcto", "COMPI2", 1);
		}catch(ParseException e){
			System.out.println("Error al parsear, "+e.getMessage());
			JOptionPane.showMessageDialog(null, "Parseo INCORRECTO", "COMPI2", 0);
		}
		
 	} 
} 
PARSER_END(registro_db)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/*Palabras Reservadas*/
TOKEN:
{
 <Procedure: "<Procedure>">
|<C_Proc: "</Procedure>">
|<Obj: "<Object>">
|<C_Obj: "</Object>">
|<Tabla: "<Tabla>">
|<C_Tabla: "</Tabla>">
|<Rows: "<rows>">
|<C_Rows: "</rows>">
|<INT: "<integer>">
|<BOOL: "<bool>">
|<TEXT: "<text>">
|<C_INT: "</integer>">
|<C_BOOL: "</bool>">
|<C_TEXT: "</text>">
|<NOMBRE: "<nombre>">
|<C_NOMBRE: "</nombre>">
|<PATH: "<path>">
|<C_PATH: "</path>">
|<Crs: "<crs>">
|<C_Crs: "</crs>">
|<PK:"PK">
|<AUTO_INC: "inc">
|<FK:"FK">
|<NULO:"Nulo">
|<NOT_NULL:"No Nulo">
|<coma:",">
}


/*EXPRESIONES REGULARES*/
TOKEN :
{
  < NUM: <DECIMAL_LITERAL >>
| < #DECIMAL_LITERAL: ["0"-"9"] (["0"-"9"])*(["."](["0"-"9"])*)? >
| < IDEN: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","0"-"9","_",":","/","\\","."] )* >
| < CADENA: "C" ":" (~["\"","\n","\t","<",">"])+ >

}


Nodo Inicio():
{Nodo raiz,r;}
{ 
   {raiz= new Nodo("registro_db",0,0);}
   (r=Sentencias()  {raiz.hijos.addLast(r);})*
   <EOF>
   {return raiz;}
  
}


Nodo Procedure():
{Nodo raiz;Token b;}
{
 <Procedure> 
 	<PATH> b=<CADENA> <C_PATH>
 <C_Proc>

 {raiz = new Nodo("PROC",b.beginLine,b.beginColumn,b.image);
  return raiz;}
}


Nodo Object_U():
{Nodo raiz;Token a;}
{
 <Obj> 
 	<PATH> a=<CADENA> <C_PATH>
 <C_Obj>

 {raiz = new Nodo("OBJETO",a.beginLine,a.beginColumn,a.image);
  return raiz;}
}




Nodo Sentencias():
{Nodo raiz;}
{
	 raiz= Object_U()    {return raiz;}
	|raiz= Tabla()		   {return raiz;}
	|raiz= Procedure()	 {return raiz;}

}


Nodo Tabla():
{Nodo raiz,r,rows;Token a,b;}
{
 {rows= new Nodo("filas",0,0);}
 <Tabla> 
 	<NOMBRE>a=<IDEN> <C_NOMBRE>
 	<PATH> b=<CADENA> <C_PATH>
 	<Rows>
 	  (r=Atributo(){rows.hijos.addLast(r);})*
 	<C_Rows>
 <C_Tabla>

 {raiz = new Nodo("Tabla",a.beginLine,a.beginColumn,a.image,b.image);
  raiz.hijos.addLast(rows);
  return raiz;}
}


Nodo Atributo():
{Nodo raiz,sent;Token a,b;}
{
  a=<INT>b=<IDEN> 
    {raiz = new Nodo("ATRIBUTO",a.beginLine,a.beginColumn,a.image,b.image); }
 	(sent=Caracteristicas(){raiz.hijos.addLast(sent);})?
 	<C_INT>
	{return raiz;}

 |a=<BOOL>b=<IDEN>
 	{raiz = new Nodo("ATRIBUTO",a.beginLine,a.beginColumn,a.image,b.image); }
 	(sent=Caracteristicas(){raiz.hijos.addLast(sent);})?
    <C_BOOL>
    {return raiz;}
 

 |a=<TEXT>b=<IDEN>
    {raiz = new Nodo("ATRIBUTO",a.beginLine,a.beginColumn,a.image,b.image); }
 	(sent=Caracteristicas(){raiz.hijos.addLast(sent);})?
    <C_TEXT>
    {return raiz;}

}

Nodo Caracteristicas():
{Nodo raiz,sent;}
{
  {raiz = new Nodo("CRS",0,0);}
  <Crs>   sent=Crs(){raiz.hijos.addLast(sent);}(sent=Crs(){raiz.hijos.addLast(sent);})* <C_Crs>

  {return raiz;}
}

Nodo Crs():
{Token a,b;}
{
	   <PK>  					        {return new Nodo("PK",token.beginLine,token.beginColumn);}
   | <FK>a=<IDEN> b=<IDEN>	{return new Nodo("FK",a.beginLine,a.beginColumn,a.image,b.image);}
   | <AUTO_INC>				      {return new Nodo("INC",token.beginLine,token.beginColumn);}
   | <NULO>					        {return new Nodo("NULL",token.beginLine,token.beginColumn);} 	
   | <NOT_NULL>   			    {return new Nodo("NOT_NULL",token.beginLine,token.beginColumn);}

}