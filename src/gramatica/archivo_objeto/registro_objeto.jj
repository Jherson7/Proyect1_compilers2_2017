options {
//LOOKAHEAD=1;
STATIC = false;
} 

PARSER_BEGIN(registro_obj)
package gramatica.archivo_objeto;
import ArbolAST.Nodo;
import javax.swing.JOptionPane;


public class registro_obj{
public static Nodo root=null;

 public Nodo retornarArbol(){
 	return root;
 }
 public static void main(String args[]) throws ParseException 
 	{ 
		try{
			registro_obj miParser = new registro_obj(System.in); 
		    root = miParser .Inicio();
		    JOptionPane.showMessageDialog(null, "Parseo Correcto", "COMPI2", 1);
		}catch(ParseException e){
			System.out.println("Error al parsear, "+e.getMessage());
			JOptionPane.showMessageDialog(null, "Parseo INCORRECTO", "COMPI2", 0);
		}
		
 	} 
} 
PARSER_END(registro_obj)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/*Palabras Reservadas*/
TOKEN:
{
 <Obj: "<Obj>">
|<C_Obj: "</Obj>">
|<Tabla: "<Tabla>">
|<C_Tabla: "</Tabla>">
|<Attr: "<attr>">
|<C_Attr: "</attr>">
|<INT: "<int>">
|<BOOL: "<bool>">
|<TEXT: "<text>">
|<C_INT: "</int>">
|<C_BOOL: "</bool>">
|<C_TEXT: "</text>">
|<NOMBRE: "<nombre>">
|<C_NOMBRE: "</nombre>">
|<PATH: "<path>">
|<C_PATH: "</path>">
|<NOT_NULL:"No Nulo">
|<NULO:"Nulo">
|<PK:"Llave_Primaria">
|<AUTO_INCREMENT: "Autoincrementable">
|<FK:"Llave_Foranea">

}

/*EXPRESIONES REGULARES*/
TOKEN :
{
  < NUM: <DECIMAL_LITERAL >>
| < #DECIMAL_LITERAL: ["0"-"9"] (["0"-"9"])*(["."](["0"-"9"])*)? >
| < IDEN: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","0"-"9","_"] )* >
| < CADENA: (~["\"","\n","\t"," "])+ >
}


Nodo Inicio():
{Nodo raiz,r;}
{ 
   {raiz= new Nodo("registro_obj",0,0);}
   (r=Object_U()  {raiz.hijos.addLast(r);})+
   <EOF>
   {return raiz;}
  
}



Nodo Object_U():
{Nodo raiz,r,atrib;Token b;}
{
{atrib= new Nodo("ATRIBUTO",0,0);}
<Obj>
 	<NOMBRE> b=<CADENA> <NOMBRE>
 	<Attr>
 		(r=Atributo(){atrib.hijos.addLast(r);})+
 	<C_Attr>
 <C_Obj>

 {raiz = new Nodo("OBJETO",b.beginLine,b.beginColumn,b.image);
  raiz.hijos.addLast(atrib);
  return raiz;}
}


Nodo Atributo():
{Nodo raiz;Token a,b;}
{
  a=<INT>b=<IDEN><C_INT>
 |a=<BOOL>b=<IDEN><C_BOOL>
 |a=<TEXT>b=<IDEN><C_TEXT>

 {raiz = new Nodo("ATRIBUTO",a.beginLine,a.beginColumn,a.image,b.image);
  return raiz;}
}