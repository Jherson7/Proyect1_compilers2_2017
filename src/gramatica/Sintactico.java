/* Sintactico.java */
/* Generated By:JavaCC: Do not edit this line. Sintactico.java */
package gramatica;
import ArbolAST.Nodo;
import javax.swing.JOptionPane;


public class Sintactico implements SintacticoConstants {
public static Nodo root=null;

 public Nodo retornarArbol(){
        return root;
 }
 public static void main(String args[]) throws ParseException
        {
                try{
                        Sintactico miParser = new Sintactico(System.in);
                    root = miParser .Inicio();
                    JOptionPane.showMessageDialog(null, "Parseo Correcto", "COMPI2", 1);
                }catch(ParseException e){
                        System.out.println("Error al parsear, "+e.getMessage());
                        JOptionPane.showMessageDialog(null, "Parseo INCORRECTO", "COMPI2", 0);
                }

        }

  final public Nodo Inicio() throws ParseException {Nodo raiz,sent;
raiz= new Nodo("INICIO",0,0);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case USAR:
      case CREAR:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      sent = Sentencias_Padre();
raiz.hijos.addLast(sent);
    }
    jj_consume_token(0);
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Padre() throws ParseException {Nodo raiz,parametros,aux; Token v;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CREAR:{
      jj_consume_token(CREAR);
      raiz = Sentencias_Crear();
{if ("" != null) return raiz;}
      break;
      }
    case USAR:{
      jj_consume_token(USAR);
      v = jj_consume_token(IDEN);
      jj_consume_token(ptc);
{if ("" != null) return new Nodo("USAR",v.beginLine,v.beginColumn,v.image);}
      break;
      }
    case IDEN:{
      v = jj_consume_token(IDEN);
      jj_consume_token(apar);
raiz=new Nodo("CALL_FUN",v.beginLine,v.beginColumn,v.image);
                        parametros=new Nodo("PARAMETROS",0,0);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:
      case menos:
      case apar:
      case key:
      case NUM:
      case FALSE:
      case TRUE:
      case IDEN:
      case DATE_EXP:
      case DATE_TIME_EXP:
      case CARACTER:
      case CADENA:{
        aux = Rel_Or();
parametros.hijos.addLast(aux);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case coma:{
            ;
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          jj_consume_token(coma);
          aux = Rel_Or();
parametros.hijos.addLast(aux);
        }
raiz.hijos.addLast(parametros);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(cpar);
      jj_consume_token(ptc);
{if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Crear() throws ParseException {Nodo raiz,sent,atr; Token v;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BASE_DATOS:{
      jj_consume_token(BASE_DATOS);
      v = jj_consume_token(IDEN);
      jj_consume_token(ptc);
raiz = new Nodo("BASE_DATOS",v.beginLine,v.beginColumn,v.image); {if ("" != null) return raiz;}
      break;
      }
    case TABLA:{
      jj_consume_token(TABLA);
      raiz = Sentencias_Tabla();
      jj_consume_token(ptc);
{if ("" != null) return raiz;}
      break;
      }
    case USUARIO:{
      jj_consume_token(USUARIO);
      raiz = Crear_Usuario();
      jj_consume_token(ptc);
{if ("" != null) return raiz;}
      break;
      }
    case PROCEDIMIENTO:{
      jj_consume_token(PROCEDIMIENTO);
      raiz = Sentencias_Procedimiento();
{if ("" != null) return raiz;}
      break;
      }
    case FUNCION:{
      jj_consume_token(FUNCION);
      raiz = Sentencias_Funcion();
{if ("" != null) return raiz;}
      break;
      }
    case OBJECTO:{
      jj_consume_token(OBJECTO);
      v = jj_consume_token(IDEN);
      jj_consume_token(apar);
raiz = new Nodo("OBJECTO",v.beginLine,v.beginColumn,v.image);
atr = new Nodo("ATRIBUTOS",v.beginLine,v.beginColumn);
      label_3:
      while (true) {
        sent = Sentencias_Objeto();
atr.hijos.addLast(sent);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case coma:{
            ;
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            break label_4;
          }
          jj_consume_token(coma);
          sent = Sentencias_Objeto();
atr.hijos.addLast(sent);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NULO:
        case BOOL:
        case CHAR:
        case INTEGER:
        case TEXT:
        case DOUBLE:
        case DATE:
        case DATETIME:
        case IDEN:
        case CARACTER:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
      }
      jj_consume_token(cpar);
      jj_consume_token(ptc);
raiz.hijos.addLast(atr);
        {if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Crear_Usuario() throws ParseException {Token a,b;
    a = jj_consume_token(IDEN);
    jj_consume_token(COLOCAR);
    jj_consume_token(PASS);
    jj_consume_token(ASIG);
    b = jj_consume_token(CADENA);
{if ("" != null) return new Nodo("CREAR_USER",a.beginLine,a.beginColumn,a.image,b.image);}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Tabla() throws ParseException {Nodo raiz,sent,atributos; Token v;
    v = jj_consume_token(IDEN);
raiz=new Nodo("TABLA",v.beginLine,v.beginColumn,v.image);
atributos=new Nodo("ATRIBUTOS",0,0);
    jj_consume_token(apar);
    sent = Atributos_Tabla();
atributos.hijos.addLast(sent);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case coma:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      jj_consume_token(coma);
      sent = Atributos_Tabla();
atributos.hijos.addLast(sent);
    }
    jj_consume_token(cpar);
raiz.hijos.addLast(atributos);
         {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Atributos_Tabla() throws ParseException {Nodo raiz,features,aux, tipo; Token t;
features = new Nodo("FEATURES",0,0);
    tipo = Tipo_Var();
    t = jj_consume_token(IDEN);
raiz= new Nodo("ATRIBUTO_TABLA",t.beginLine,t.beginColumn,tipo,t.image);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PK:
      case AUTO_INCREMENT:
      case FK:
      case NOT_NULL:
      case NULO:
      case UNICO:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      aux = Caracteristicas();
features.hijos.addLast(aux);
    }
raiz.hijos.addLast(features);
                {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Caracteristicas() throws ParseException {Token v,t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FK:{
      jj_consume_token(FK);
      v = jj_consume_token(IDEN);
      t = jj_consume_token(IDEN);
{if ("" != null) return new Nodo("FK",v.beginLine,v.beginColumn,v.image,t.image);}
      break;
      }
    case PK:{
      v = jj_consume_token(PK);
{if ("" != null) return new Nodo("PK",v.beginLine,v.beginColumn,v.image);}
      break;
      }
    case AUTO_INCREMENT:{
      v = jj_consume_token(AUTO_INCREMENT);
{if ("" != null) return new Nodo("AUTO_INCREMENT",v.beginLine,v.beginColumn,v.image);}
      break;
      }
    case NOT_NULL:{
      v = jj_consume_token(NOT_NULL);
{if ("" != null) return new Nodo("NOT NULL",v.beginLine,v.beginColumn,v.image);}
      break;
      }
    case NULO:{
      v = jj_consume_token(NULO);
{if ("" != null) return new Nodo("NULL",v.beginLine,v.beginColumn,v.image);}
      break;
      }
    case UNICO:{
      v = jj_consume_token(UNICO);
{if ("" != null) return new Nodo("UNICO",v.beginLine,v.beginColumn,v.image);}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Procedimiento() throws ParseException {Nodo raiz,parametros,p,sentencias;Token t;
parametros= new Nodo("PARAMETROS",0,0);
sentencias= new Nodo("SENTENCIAS",0,0);
    t = jj_consume_token(IDEN);
raiz=new Nodo("PROCEDIMIENTO",t.beginLine,t.beginColumn,t.image);
    jj_consume_token(apar);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NULO:
    case BOOL:
    case CHAR:
    case INTEGER:
    case TEXT:
    case DOUBLE:
    case DATE:
    case DATETIME:
    case IDEN:
    case CARACTER:{
      p = Parametros();
parametros.hijos.addLast(p);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case coma:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_7;
        }
        jj_consume_token(coma);
        p = Parametros();
parametros.hijos.addLast(p);
      }
raiz.hijos.addLast(parametros);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(cpar);
    jj_consume_token(alla);
    label_8:
    while (true) {
      p = Sentencias_Usql();
sentencias.hijos.addLast(p);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case key:
      case PARA:
      case MIENTRAS:
      case DETENER:
      case IMPRIMIR:
      case CONTAR:
      case BACKUP:
      case RESTAURAR:
      case DECLARAR:
      case DENEGAR:
      case OTORGAR:
      case SELECCIONAR:
      case BORRAR:
      case ACTUALIZAR:
      case INSERTAR:
      case ALTERAR:
      case RETORNO:
      case ELIMINAR:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
    }
    jj_consume_token(clla);
raiz.hijos.addLast(sentencias);
                {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Funcion() throws ParseException {Nodo raiz,parametros,p,sentencias,tipo;Token t;
parametros= new Nodo("PARAMETROS",0,0);
sentencias= new Nodo("SENTENCIAS",0,0);
    t = jj_consume_token(IDEN);
raiz=new Nodo("FUNCION",t.beginLine,t.beginColumn,t.image);
    jj_consume_token(apar);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NULO:
    case BOOL:
    case CHAR:
    case INTEGER:
    case TEXT:
    case DOUBLE:
    case DATE:
    case DATETIME:
    case IDEN:
    case CARACTER:{
      p = Parametros();
parametros.hijos.addLast(p);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case coma:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_9;
        }
        jj_consume_token(coma);
        p = Parametros();
parametros.hijos.addLast(p);
      }
raiz.hijos.addLast(parametros);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(cpar);
    tipo = Tipo_Var();
    jj_consume_token(alla);
    label_10:
    while (true) {
      p = Sentencias_Usql();
sentencias.hijos.addLast(p);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case key:
      case PARA:
      case MIENTRAS:
      case DETENER:
      case IMPRIMIR:
      case CONTAR:
      case BACKUP:
      case RESTAURAR:
      case DECLARAR:
      case DENEGAR:
      case OTORGAR:
      case SELECCIONAR:
      case BORRAR:
      case ACTUALIZAR:
      case INSERTAR:
      case ALTERAR:
      case RETORNO:
      case ELIMINAR:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_10;
      }
    }
    jj_consume_token(clla);
raiz.hijos.addLast(tipo);
                raiz.hijos.addLast(sentencias);
                {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Parametros() throws ParseException {Nodo raiz,aux;Nodo tipo; Token t;
    tipo = Tipo_Var();
    jj_consume_token(key);
    t = jj_consume_token(IDEN);
raiz=new Nodo("PARAMETRO",t.beginLine,t.beginColumn);
                raiz.hijos.addLast(tipo);
                raiz.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));
                {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Usql() throws ParseException {Nodo sent; Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MIENTRAS:{
      sent = Ciclo_While();
{if ("" != null) return sent;}
      break;
      }
    case PARA:{
      sent = Ciclo_For();
{if ("" != null) return sent;}
      break;
      }
    case IMPRIMIR:{
      sent = Imprimir();
{if ("" != null) return sent;}
      break;
      }
    case IDEN:{
      sent = Llamada_funcion();
{if ("" != null) return sent;}
      break;
      }
    case RETORNO:{
      sent = Retornar();
      jj_consume_token(ptc);
{if ("" != null) return sent;}
      break;
      }
    case DECLARAR:{
      sent = Declaracion();
      jj_consume_token(ptc);
{if ("" != null) return sent;}
      break;
      }
    case key:{
      sent = Asignacion();
      jj_consume_token(ptc);
{if ("" != null) return sent;}
      break;
      }
    case CONTAR:{
      sent = Contar();
      jj_consume_token(ptc);
{if ("" != null) return sent;}
      break;
      }
    case ALTERAR:{
      jj_consume_token(ALTERAR);
      sent = Alterar();
      jj_consume_token(ptc);
{if ("" != null) return sent;}
      break;
      }
    case DETENER:{
      jj_consume_token(DETENER);
sent=new Nodo("DETENER",token.beginLine,token.beginColumn);
{if ("" != null) return sent;}
      break;
      }
    case ELIMINAR:{
      jj_consume_token(ELIMINAR);
      sent = Sentencias_Eliminar();
      jj_consume_token(ptc);
{if ("" != null) return sent;}
      break;
      }
    case INSERTAR:{
      jj_consume_token(INSERTAR);
      jj_consume_token(EN);
      jj_consume_token(TABLA);
      sent = Sentencias_Insertar();
      jj_consume_token(ptc);
{if ("" != null) return sent;}
      break;
      }
    case ACTUALIZAR:{
      jj_consume_token(ACTUALIZAR);
      jj_consume_token(TABLA);
      sent = Sentencias_Actualizar();
      jj_consume_token(ptc);
{if ("" != null) return sent;}
      break;
      }
    case BORRAR:{
      jj_consume_token(BORRAR);
      jj_consume_token(EN);
      jj_consume_token(TABLA);
      sent = Sentencias_Borrar();
      jj_consume_token(ptc);
{if ("" != null) return sent;}
      break;
      }
    case SELECCIONAR:{
      jj_consume_token(SELECCIONAR);
      sent = Sentencias_Seleccionar();
      jj_consume_token(ptc);
{if ("" != null) return sent;}
      break;
      }
    case OTORGAR:{
      jj_consume_token(OTORGAR);
      jj_consume_token(PERMISOS);
      sent = Sentencias_Permisos();
      jj_consume_token(ptc);
{if ("" != null) return sent;}
      break;
      }
    case DENEGAR:{
      jj_consume_token(DENEGAR);
      jj_consume_token(PERMISOS);
      sent = Sentencias_Denengar();
      jj_consume_token(ptc);
{if ("" != null) return sent;}
      break;
      }
    case BACKUP:{
      jj_consume_token(BACKUP);
      sent = Sentencias_Backup();
      jj_consume_token(ptc);
{if ("" != null) return sent;}
      break;
      }
    case RESTAURAR:{
      jj_consume_token(RESTAURAR);
      sent = Sentencias_Restaurar();
      jj_consume_token(ptc);
{if ("" != null) return sent;}
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Backup() throws ParseException {Nodo raiz; Token a,b;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case USQLDUMP:{
      jj_consume_token(USQLDUMP);
      a = jj_consume_token(IDEN);
      b = jj_consume_token(IDEN);
raiz= new Nodo("BACKUP_USQL",a.beginLine,a.beginColumn,a.image,b.image); {if ("" != null) return raiz;}
      break;
      }
    case COMPLETO:{
      jj_consume_token(COMPLETO);
      a = jj_consume_token(IDEN);
      b = jj_consume_token(IDEN);
raiz= new Nodo("BACKUP_COMPLETO",a.beginLine,a.beginColumn,a.image,b.image); {if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Restaurar() throws ParseException {Nodo raiz; Token a,b;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case USQLDUMP:{
      jj_consume_token(USQLDUMP);
      a = jj_consume_token(IDEN);
      b = jj_consume_token(IDEN);
raiz= new Nodo("RESTORE_USQL",a.beginLine,a.beginColumn,a.image,b.image); {if ("" != null) return raiz;}
      break;
      }
    case COMPLETO:{
      jj_consume_token(COMPLETO);
      a = jj_consume_token(IDEN);
      b = jj_consume_token(IDEN);
raiz= new Nodo("RESTORE_COMPLETO",a.beginLine,a.beginColumn,a.image,b.image); {if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Contar() throws ParseException {Nodo raiz,r;Token v;
    v = jj_consume_token(CONTAR);
    jj_consume_token(apar);
    jj_consume_token(108);
    jj_consume_token(SELECCIONAR);
    r = Sentencias_Seleccionar();
    jj_consume_token(109);
    jj_consume_token(cpar);
raiz = new Nodo("CONTAR",v.beginLine,v.beginColumn);
         raiz.hijos.addLast(r);
         {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Denengar() throws ParseException {Nodo raiz; Token user,bd,obj;
    user = jj_consume_token(IDEN);
    jj_consume_token(coma);
    bd = jj_consume_token(IDEN);
    jj_consume_token(punto);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDEN:{
      obj = jj_consume_token(IDEN);
      break;
      }
    case mult:{
      obj = jj_consume_token(mult);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
raiz = new Nodo("DENEGAR",user.beginLine,user.beginColumn,user.image,bd.image);
         raiz.hijos.addLast(new Nodo(obj.image,obj.beginLine,obj.beginColumn));
         {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Permisos() throws ParseException {Nodo raiz; Token user,bd,obj;
    user = jj_consume_token(IDEN);
    jj_consume_token(coma);
    bd = jj_consume_token(IDEN);
    jj_consume_token(punto);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDEN:{
      obj = jj_consume_token(IDEN);
      break;
      }
    case mult:{
      obj = jj_consume_token(mult);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
raiz = new Nodo("OTORGAR",user.beginLine,user.beginColumn,user.image,bd.image);
         raiz.hijos.addLast(new Nodo(obj.image,obj.beginLine,obj.beginColumn));
         {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Seleccionar() throws ParseException {Nodo raiz,l_campos,l_tablas,r;Token v;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case mult:{
l_tablas = new Nodo("lista_tablas",0,0);
raiz = new Nodo("SELECCIONAR_*",0,0);
      jj_consume_token(mult);
      jj_consume_token(DE);
      v = jj_consume_token(IDEN);
l_tablas.hijos.addLast(new Nodo(v.image,v.beginLine,v.beginColumn));
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case coma:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_11;
        }
        jj_consume_token(coma);
        v = jj_consume_token(IDEN);
l_tablas.hijos.addLast(new Nodo(v.image,v.beginLine,v.beginColumn));
      }
raiz.hijos.addLast(l_tablas);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DONDE:{
        jj_consume_token(DONDE);
        r = Rel_Or();
raiz.hijos.addLast(r);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
{if ("" != null) return raiz;}
      break;
      }
    case IDEN:{
raiz = new Nodo("SELECCIONAR",0,0);
l_campos = new Nodo("lista_campos",0,0);
l_tablas = new Nodo("lista_tablas",0,0);
      r = Llamada_funcion();
l_campos.hijos.addLast(r);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case coma:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_12;
        }
        jj_consume_token(coma);
        r = Llamada_funcion();
l_campos.hijos.addLast(r);
      }
      jj_consume_token(DE);
      v = jj_consume_token(IDEN);
l_tablas.hijos.addLast(new Nodo(v.image,v.beginLine,v.beginColumn));
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case coma:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_13;
        }
        jj_consume_token(coma);
        v = jj_consume_token(IDEN);
l_tablas.hijos.addLast(new Nodo(v.image,v.beginLine,v.beginColumn));
      }
raiz.hijos.addLast(l_campos); raiz.hijos.addLast(l_tablas);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DONDE:{
        jj_consume_token(DONDE);
        r = Rel_Or();
raiz.hijos.addLast(r);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
{if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Borrar() throws ParseException {Nodo raiz,r; Token t,v;
    t = jj_consume_token(IDEN);
raiz = new Nodo("BORRAR",t.beginLine,t.beginColumn,t.image);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DONDE:{
      jj_consume_token(DONDE);
      r = Rel_Or();
raiz.hijos.addLast(r);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Insertar() throws ParseException {Nodo raiz,r,atr,atr2; Token t;
atr=new Nodo  ("ATRIBUTOS",0,0);
    t = jj_consume_token(IDEN);
raiz = new Nodo("INSERTAR",t.beginLine,t.beginColumn,t.image);
    jj_consume_token(apar);
    r = Rel_Or();
atr.hijos.addLast(r);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case coma:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_14;
      }
      jj_consume_token(coma);
      r = Rel_Or();
atr.hijos.addLast(r);
    }
    jj_consume_token(cpar);
raiz.hijos.addLast(atr);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALORES:{
atr2=new Nodo("ATRIBUTOS",0,0);
      jj_consume_token(VALORES);
      jj_consume_token(apar);
      r = Rel_Or();
atr2.hijos.addLast(r);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case coma:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_15;
        }
        jj_consume_token(coma);
        r = Rel_Or();
atr2.hijos.addLast(r);
      }
      jj_consume_token(cpar);
raiz.hijos.addLast(atr2); raiz.nombre="INSERTAR_ESPECIAL";
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Actualizar() throws ParseException {Nodo raiz,r,atr,atr2; Token t;
atr=new Nodo   ("ATRIBUTOS",0,0);
atr2=new Nodo      ("ATRIBUTOS",0,0);
    t = jj_consume_token(IDEN);
raiz = new Nodo("ACTUALIZAR_TABLA",t.beginLine,t.beginColumn,t.image);
    jj_consume_token(apar);
    t = jj_consume_token(IDEN);
atr.hijos.add(new Nodo(t.image,t.beginLine,t.beginColumn));
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case coma:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_16;
      }
      jj_consume_token(coma);
      t = jj_consume_token(IDEN);
atr.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));
    }
    jj_consume_token(cpar);
    jj_consume_token(VALORES);
    jj_consume_token(apar);
    r = Rel_Or();
atr2.hijos.addLast(r);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case coma:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_17;
      }
      jj_consume_token(coma);
      r = Rel_Or();
atr2.hijos.addLast(r);
    }
    jj_consume_token(cpar);
raiz.hijos.addLast(atr);
          raiz.hijos.addLast(atr2);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DONDE:{
      jj_consume_token(DONDE);
      r = Rel_Or();
raiz.hijos.addLast(r);
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Alterar() throws ParseException {Nodo raiz,r; Token t,v;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TABLA:{
      jj_consume_token(TABLA);
      t = jj_consume_token(IDEN);
      r = Alterar_Tabla();
raiz= new Nodo("ALTERAR_TABLA",t.beginLine,t.beginColumn,t.image);
                                                                                   raiz.hijos.addLast(r);  {if ("" != null) return raiz;}
      break;
      }
    case OBJECTO:{
      jj_consume_token(OBJECTO);
      t = jj_consume_token(IDEN);
      r = Alterar_Objeto();
raiz= new Nodo("ALTERAR_OBJETO",t.beginLine,t.beginColumn,t.image);
                                                                                   raiz.hijos.addLast(r);  {if ("" != null) return raiz;}
      break;
      }
    case USUARIO:{
      jj_consume_token(USUARIO);
      v = jj_consume_token(IDEN);
      jj_consume_token(CAMBIAR);
      jj_consume_token(PASS);
      jj_consume_token(ASIG);
      t = jj_consume_token(TEXT);
raiz= new Nodo("ALTERAR_USUARIO",t.beginLine,t.beginColumn,v.image);
                                                                                                                   raiz.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));
{if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Alterar_Tabla() throws ParseException {Nodo raiz,atributos,aux; Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AGREGAR:{
atributos=new Nodo("ATRIBUTOS",0,0);
      jj_consume_token(AGREGAR);
      jj_consume_token(apar);
      aux = Atributos_Tabla();
atributos.hijos.addLast(aux);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case coma:{
          ;
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          break label_18;
        }
        jj_consume_token(coma);
        aux = Atributos_Tabla();
atributos.hijos.addLast(aux);
      }
      jj_consume_token(cpar);
raiz=new Nodo("AGREGAR",token.beginLine,token.beginColumn); raiz.hijos.add(atributos); {if ("" != null) return raiz;}
      break;
      }
    case QUITAR:{
atributos=new Nodo("ATRIBUTOS",0,0);
      jj_consume_token(QUITAR);
      t = jj_consume_token(IDEN);
atributos.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case coma:{
          ;
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          break label_19;
        }
        jj_consume_token(coma);
        t = jj_consume_token(IDEN);
atributos.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));
      }
raiz=new Nodo("QUITAR",token.beginLine,token.beginColumn); raiz.hijos.add(atributos);
{if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Alterar_Objeto() throws ParseException {Nodo raiz,atributos,aux; Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AGREGAR:{
atributos=new Nodo("ATRIBUTOS",0,0);
      jj_consume_token(AGREGAR);
      jj_consume_token(apar);
      aux = Sentencias_Objeto();
atributos.hijos.addLast(aux);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case coma:{
          ;
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          break label_20;
        }
        jj_consume_token(coma);
        aux = Sentencias_Objeto();
atributos.hijos.addLast(aux);
      }
      jj_consume_token(cpar);
raiz=new Nodo("AGREGAR",token.beginLine,token.beginColumn); raiz.hijos.add(atributos);
{if ("" != null) return raiz;}
      break;
      }
    case QUITAR:{
atributos=new Nodo("ATRIBUTOS",0,0);
      jj_consume_token(QUITAR);
      t = jj_consume_token(IDEN);
atributos.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case coma:{
          ;
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          break label_21;
        }
        jj_consume_token(coma);
        t = jj_consume_token(IDEN);
atributos.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));
      }
raiz=new Nodo("QUITAR",token.beginLine,token.beginColumn); raiz.hijos.add(atributos);
{if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Eliminar() throws ParseException {Nodo raiz; Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OBJECTO:{
      jj_consume_token(OBJECTO);
      t = jj_consume_token(IDEN);
raiz= new Nodo("ELIMINAR_OBJ",t.beginLine,t.beginColumn,t.image);   {if ("" != null) return raiz;}
      break;
      }
    case TABLA:{
      jj_consume_token(TABLA);
      t = jj_consume_token(IDEN);
raiz= new Nodo("ELIMINAR_TABLA",t.beginLine,t.beginColumn,t.image); {if ("" != null) return raiz;}
      break;
      }
    case BASE_DATOS:{
      jj_consume_token(BASE_DATOS);
      t = jj_consume_token(IDEN);
raiz= new Nodo("ELIMINAR_BD",t.beginLine,t.beginColumn,t.image);    {if ("" != null) return raiz;}
      break;
      }
    case USUARIO:{
      jj_consume_token(USUARIO);
      t = jj_consume_token(IDEN);
raiz= new Nodo("ELIMINAR_USER",t.beginLine,t.beginColumn,t.image);  {if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Retornar() throws ParseException {Nodo raiz,aux; Token t;
    t = jj_consume_token(RETORNO);
    aux = Rel_Or();
raiz=new Nodo("RETORNO",aux);
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Llamada_funcion() throws ParseException {Nodo raiz,parametros,aux;Token t,v;
    t = jj_consume_token(IDEN);
    raiz = auxFun(t.image,t.beginLine,t.beginColumn);
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo auxFun(String nombre,int fila,int columna) throws ParseException {Token v;Nodo raiz,parametros,aux;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case punto:{
      jj_consume_token(punto);
      v = jj_consume_token(IDEN);
raiz= new Nodo("ACCESO_OBJETO",fila,columna,nombre,v.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case punto:{
        jj_consume_token(punto);
        jj_consume_token(IDEN);
raiz.hijos.addLast(new Nodo(v.image,v.beginLine,v.beginColumn));
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        ;
      }
{if ("" != null) return raiz;}
      break;
      }
    case apar:{
      jj_consume_token(apar);
raiz=new Nodo("CALL_FUN",fila,columna,nombre);
                        parametros=new Nodo("PARAMETROS",0,0);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:
      case menos:
      case apar:
      case key:
      case NUM:
      case FALSE:
      case TRUE:
      case IDEN:
      case DATE_EXP:
      case DATE_TIME_EXP:
      case CARACTER:
      case CADENA:{
        aux = Rel_Or();
parametros.hijos.addLast(aux);
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case coma:{
            ;
            break;
            }
          default:
            jj_la1[43] = jj_gen;
            break label_22;
          }
          jj_consume_token(coma);
          aux = Rel_Or();
parametros.hijos.addLast(aux);
        }
raiz.hijos.addLast(parametros);
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      jj_consume_token(cpar);
{if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[45] = jj_gen;
{if ("" != null) return new Nodo("ID_ATR",fila,columna);}
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Ciclo_While() throws ParseException {Nodo raiz,aux;Token t;
    t = jj_consume_token(MIENTRAS);
raiz= new Nodo("WHILE",t.beginLine,t.beginColumn);
    jj_consume_token(apar);
    aux = Rel_Or();
raiz.hijos.addLast(aux);
    jj_consume_token(cpar);
    jj_consume_token(alla);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case key:
      case PARA:
      case MIENTRAS:
      case DETENER:
      case IMPRIMIR:
      case CONTAR:
      case BACKUP:
      case RESTAURAR:
      case DECLARAR:
      case DENEGAR:
      case OTORGAR:
      case SELECCIONAR:
      case BORRAR:
      case ACTUALIZAR:
      case INSERTAR:
      case ALTERAR:
      case RETORNO:
      case ELIMINAR:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        break label_23;
      }
      aux = Sentencias_Usql();
raiz.hijos.addLast(aux);
    }
    jj_consume_token(clla);
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Ciclo_For() throws ParseException {Nodo raiz,aux;Token t;
    t = jj_consume_token(PARA);
raiz= new Nodo("PARA",t.beginLine,t.beginColumn);
    jj_consume_token(apar);
    aux = Declaracion();
raiz.hijos.addLast(aux);
    jj_consume_token(ptc);
    aux = Rel_Or();
raiz.hijos.addLast(aux);
    jj_consume_token(ptc);
    t = jj_consume_token(aumentos);
raiz.hijos.addLast(new Nodo(t.image,t.beginLine,t.beginColumn));
    jj_consume_token(cpar);
    jj_consume_token(alla);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case key:
      case PARA:
      case MIENTRAS:
      case DETENER:
      case IMPRIMIR:
      case CONTAR:
      case BACKUP:
      case RESTAURAR:
      case DECLARAR:
      case DENEGAR:
      case OTORGAR:
      case SELECCIONAR:
      case BORRAR:
      case ACTUALIZAR:
      case INSERTAR:
      case ALTERAR:
      case RETORNO:
      case ELIMINAR:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        break label_24;
      }
      aux = Sentencias_Usql();
raiz.hijos.addLast(aux);
    }
    jj_consume_token(clla);
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Ciclo_Selecciona() throws ParseException {Nodo raiz,aux;Token t;
    t = jj_consume_token(SELECCIONA);
raiz= new Nodo("SELECCIONA",t.beginLine,t.beginColumn);
    jj_consume_token(apar);
    aux = Rel_Or();
raiz.hijos.addLast(aux);
    jj_consume_token(cpar);
    jj_consume_token(alla);
    label_25:
    while (true) {
      aux = Casos();
raiz.hijos.addLast(aux);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASO:{
        ;
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        break label_25;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEFECTO:{
      aux = Defecto();
raiz.hijos.addLast(aux);
      break;
      }
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    jj_consume_token(clla);
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Casos() throws ParseException {Nodo raiz,aux,sentencias;Token t;
sentencias= new Nodo("SENTENCIAS",0,0);
    t = jj_consume_token(CASO);
raiz= new Nodo("CASO",t.beginLine,t.beginColumn);
    aux = Rel_Or();
raiz.hijos.addLast(aux);
    jj_consume_token(dosp);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case key:
      case PARA:
      case MIENTRAS:
      case DETENER:
      case IMPRIMIR:
      case CONTAR:
      case BACKUP:
      case RESTAURAR:
      case DECLARAR:
      case DENEGAR:
      case OTORGAR:
      case SELECCIONAR:
      case BORRAR:
      case ACTUALIZAR:
      case INSERTAR:
      case ALTERAR:
      case RETORNO:
      case ELIMINAR:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        break label_26;
      }
      aux = Sentencias_Usql();
sentencias.hijos.addLast(aux);
    }
raiz.hijos.addLast(sentencias);
                {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Defecto() throws ParseException {Nodo raiz,aux,sentencias;Token t;
sentencias= new Nodo("SENTENCIAS",0,0);
    t = jj_consume_token(DEFECTO);
raiz= new Nodo("DEFECTO",t.beginLine,t.beginColumn);
    jj_consume_token(dosp);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case key:
      case PARA:
      case MIENTRAS:
      case DETENER:
      case IMPRIMIR:
      case CONTAR:
      case BACKUP:
      case RESTAURAR:
      case DECLARAR:
      case DENEGAR:
      case OTORGAR:
      case SELECCIONAR:
      case BORRAR:
      case ACTUALIZAR:
      case INSERTAR:
      case ALTERAR:
      case RETORNO:
      case ELIMINAR:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        break label_27;
      }
      aux = Sentencias_Usql();
sentencias.hijos.addLast(aux);
    }
raiz.hijos.addLast(sentencias);
                {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo IF() throws ParseException {Nodo raiz,aux,sentencias;Token t;
sentencias= new Nodo("SENTENCIAS",0,0);
    t = jj_consume_token(SI);
raiz= new Nodo("SI",t.beginLine,t.beginColumn);
    jj_consume_token(apar);
    aux = Rel_Or();
raiz.hijos.addLast(aux);
    jj_consume_token(cpar);
    jj_consume_token(alla);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case key:
      case PARA:
      case MIENTRAS:
      case DETENER:
      case IMPRIMIR:
      case CONTAR:
      case BACKUP:
      case RESTAURAR:
      case DECLARAR:
      case DENEGAR:
      case OTORGAR:
      case SELECCIONAR:
      case BORRAR:
      case ACTUALIZAR:
      case INSERTAR:
      case ALTERAR:
      case RETORNO:
      case ELIMINAR:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        break label_28;
      }
      aux = Sentencias_Usql();
sentencias.hijos.addLast(aux);
    }
raiz.hijos.addLast(sentencias);
    jj_consume_token(clla);
    jj_consume_token(SINO);
    jj_consume_token(alla);
sentencias= new Nodo("SENTENCIAS",0,0);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case key:
      case PARA:
      case MIENTRAS:
      case DETENER:
      case IMPRIMIR:
      case CONTAR:
      case BACKUP:
      case RESTAURAR:
      case DECLARAR:
      case DENEGAR:
      case OTORGAR:
      case SELECCIONAR:
      case BORRAR:
      case ACTUALIZAR:
      case INSERTAR:
      case ALTERAR:
      case RETORNO:
      case ELIMINAR:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        break label_29;
      }
      aux = Sentencias_Usql();
sentencias.hijos.addLast(aux);
    }
raiz.hijos.addLast(sentencias);
    jj_consume_token(clla);
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Imprimir() throws ParseException {Nodo raiz,sent; Token t;
    t = jj_consume_token(IMPRIMIR);
    jj_consume_token(apar);
    Rel_Or();
    jj_consume_token(cpar);
raiz = new Nodo("IMPRIMIR",t.beginLine,t.beginColumn);
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Sentencias_Objeto() throws ParseException {Nodo raiz, tipo;Token t;
    tipo = Tipo_Var();
    t = jj_consume_token(IDEN);
raiz= new Nodo("ATRIBUTO_OBJETO",t.beginLine,t.beginColumn,tipo,t.image);
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Asignacion() throws ParseException {Nodo raiz,r; Token a,b;
    jj_consume_token(key);
    a = jj_consume_token(IDEN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASIG:{
      jj_consume_token(ASIG);
      r = Rel_Or();
raiz=new Nodo("ASIGNACION",a.beginLine,a.beginColumn,a.image);
                                                                           raiz.hijos.addLast(r);
      break;
      }
    case punto:{
      jj_consume_token(punto);
      b = jj_consume_token(IDEN);
      jj_consume_token(ASIG);
      r = Rel_Or();
raiz=new Nodo("ASIGNACION_OBJETO",a.beginLine,a.beginColumn,a.image,b.image);
                                                 raiz.hijos.addLast(r);
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Declaracion() throws ParseException {Nodo raiz,variables,aux, tipo;Token t;
variables=new Nodo("Lista_Variables",0,0);
    t = jj_consume_token(DECLARAR);
    aux = Variables();
variables.hijos.addLast(aux);
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case coma:{
        ;
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        break label_30;
      }
      jj_consume_token(coma);
      aux = Variables();
variables.hijos.addLast(aux);
    }
    tipo = Tipo_Var();
raiz=new Nodo("DECLARAR",t.beginLine,t.beginColumn);
        if(tipo.nombre=="ID")
                raiz.nombre="INSTANCIAR";
        raiz.hijos.addLast(tipo);
        raiz.hijos.addLast(variables);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASIG:{
      jj_consume_token(ASIG);
      aux = Rel_Or();
raiz.hijos.addLast(aux);
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      ;
    }
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Variables() throws ParseException {Token v;
    jj_consume_token(key);
    v = jj_consume_token(IDEN);
{if ("" != null) return new Nodo(v.image,v.beginLine,v.beginLine);}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Rel_Or() throws ParseException {Nodo uno,dos,raiz;
    raiz = Rel_And();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        break label_31;
      }
      jj_consume_token(OR);
      uno = Rel_And();
dos=raiz; raiz= new Nodo ( "OR",dos,"||",uno);
    }
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Rel_And() throws ParseException {Nodo uno,dos,raiz;
    raiz = Rel_Not();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        break label_32;
      }
      jj_consume_token(AND);
      uno = Rel_Not();
dos=raiz; raiz= new Nodo ( "AND",dos,"&&",uno);
    }
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Rel_Not() throws ParseException {Nodo uno,dos,raiz;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      uno = Rel_Not();
raiz = new Nodo("NOT",uno); {if ("" != null) return raiz;}
      break;
      }
    case menos:
    case apar:
    case key:
    case NUM:
    case FALSE:
    case TRUE:
    case IDEN:
    case DATE_EXP:
    case DATE_TIME_EXP:
    case CARACTER:
    case CADENA:{
      raiz = Relacional();
{if ("" != null) return raiz;}
      break;
      }
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Relacional() throws ParseException {Nodo uno,dos,raiz,rel;String t;
    raiz = Operacion();
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IIG:
      case NOIG:
      case MENOR:
      case MAYOR:
      case MENORI:
      case MAYORI:{
        ;
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        break label_33;
      }
      t = operadores_rel();
      /*{rel=new Nodo("OPE_REL",token.beginLine,token.beginLine, t);} */ uno = Operacion();
dos = raiz; raiz=new Nodo("COND",dos,t,uno);
    }
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public String operadores_rel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IIG:{
      jj_consume_token(IIG);
{if ("" != null) return  token.image.toString();}
      break;
      }
    case MENORI:{
      jj_consume_token(MENORI);
{if ("" != null) return  token.image.toString();}
      break;
      }
    case MAYORI:{
      jj_consume_token(MAYORI);
{if ("" != null) return  token.image.toString();}
      break;
      }
    case MENOR:{
      jj_consume_token(MENOR);
{if ("" != null) return  token.image.toString();}
      break;
      }
    case MAYOR:{
      jj_consume_token(MAYOR);
{if ("" != null) return  token.image.toString();}
      break;
      }
    case NOIG:{
      jj_consume_token(NOIG);
{if ("" != null) return  token.image.toString();}
      break;
      }
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Operacion() throws ParseException {Nodo raiz,uno,dos;
    raiz = Multiplica();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case mas:
      case menos:{
        ;
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        break label_34;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case mas:{
        jj_consume_token(mas);
        uno = Multiplica();
dos = raiz; raiz=new Nodo("MAS",dos ,"+",uno);
        break;
        }
      case menos:{
        jj_consume_token(menos);
        uno = Multiplica();
dos = raiz; raiz=new Nodo("MENOS",dos ,"-",uno);
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Multiplica() throws ParseException {Nodo raiz,uno,dos;
    raiz = Potencia();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case div:
      case mult:{
        ;
        break;
        }
      default:
        jj_la1[64] = jj_gen;
        break label_35;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case mult:{
        jj_consume_token(mult);
        uno = Potencia();
dos = raiz; raiz=new Nodo("POR",dos ,"*",uno);
        break;
        }
      case div:{
        jj_consume_token(div);
        uno = Potencia();
dos = raiz; raiz=new Nodo("DIV",dos ,"/",uno);
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Potencia() throws ParseException {Nodo raiz,uno,dos;
    raiz = Expresion();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case potencia:{
        ;
        break;
        }
      default:
        jj_la1[66] = jj_gen;
        break label_36;
      }
      jj_consume_token(potencia);
      uno = Expresion();
dos = raiz; raiz=new Nodo("EXP",dos,"^",uno);
    }
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

/*
Nodo Unario():
{Nodo raiz,r;}
{
    <menos> r=Rel_Or() {}
   | raiz = Expresion() {return raiz;}
}*/
  final public 



Nodo Expresion() throws ParseException {Nodo r,s,v;Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case key:{
      jj_consume_token(key);
      t = jj_consume_token(IDEN);
{if ("" != null) return new Nodo("ID",t.beginLine,t.beginColumn,t.image);}
      break;
      }
    case menos:{
      jj_consume_token(menos);
      r = Expresion();
{if ("" != null) return new Nodo("UNARIO",r);}
      break;
      }
    case DATE_EXP:{
      t = jj_consume_token(DATE_EXP);
{if ("" != null) return new Nodo("DATE",t.beginLine,t.beginColumn,t.image);}
      break;
      }
    case DATE_TIME_EXP:{
      t = jj_consume_token(DATE_TIME_EXP);
{if ("" != null) return new Nodo("DATE TIME",t.beginLine,t.beginColumn,t.image);}
      break;
      }
    case NUM:{
      t = jj_consume_token(NUM);
{if ("" != null) return new Nodo("NUM",t.beginLine,t.beginColumn,t.image);}
      break;
      }
    case FALSE:{
      t = jj_consume_token(FALSE);
{if ("" != null) return new Nodo("FALSE",t.beginLine,t.beginColumn,t.image);}
      break;
      }
    case TRUE:{
      t = jj_consume_token(TRUE);
{if ("" != null) return new Nodo("TRUE",t.beginLine,t.beginColumn,t.image);}
      break;
      }
    case CARACTER:{
      t = jj_consume_token(CARACTER);
{if ("" != null) return new Nodo("TEXT",t.beginLine,t.beginColumn,t.image);}
      break;
      }
    case CADENA:{
      t = jj_consume_token(CADENA);
{if ("" != null) return new Nodo("STRING",t.beginLine,t.beginColumn,t.image);}
      break;
      }
    case IDEN:{
      r = Llamada_funcion();
{if ("" != null) return r;}
      break;
      }
    case apar:{
      jj_consume_token(apar);
      r = Rel_Or();
      jj_consume_token(cpar);
{if ("" != null) return r;}
      break;
      }
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo Tipo_Var() throws ParseException {String raiz;Nodo r;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOL:{
      jj_consume_token(BOOL);
{if ("" != null) return new Nodo("BOOL",token.beginLine,token.beginColumn);}
      break;
      }
    case DATE:{
      jj_consume_token(DATE);
{if ("" != null) return new Nodo("DATE",token.beginLine,token.beginColumn);}
      break;
      }
    case DATETIME:{
      jj_consume_token(DATETIME);
{if ("" != null) return new Nodo("DATETIME",token.beginLine,token.beginColumn);}
      break;
      }
    case CHAR:{
      jj_consume_token(CHAR);
{if ("" != null) return new Nodo("CHAR",token.beginLine,token.beginColumn);}
      break;
      }
    case INTEGER:{
      jj_consume_token(INTEGER);
{if ("" != null) return new Nodo("INTEGER",token.beginLine,token.beginColumn);}
      break;
      }
    case TEXT:{
      jj_consume_token(TEXT);
{if ("" != null) return new Nodo("TEXT",token.beginLine,token.beginColumn);}
      break;
      }
    case CARACTER:{
      jj_consume_token(CARACTER);
{if ("" != null) return new Nodo("TEXT",token.beginLine,token.beginColumn);}
      break;
      }
    case DOUBLE:{
      jj_consume_token(DOUBLE);
{if ("" != null) return new Nodo("DOUBLE",token.beginLine,token.beginColumn);}
      break;
      }
    case IDEN:{
      jj_consume_token(IDEN);
{if ("" != null) return new Nodo("ID",token.beginLine,token.beginColumn,token.image);}
      break;
      }
    case NULO:{
      jj_consume_token(NULO);
{if ("" != null) return new Nodo("NULO",token.beginLine,token.beginColumn,token.image);}
      break;
      }
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SintacticoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[69];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x8000000,0x40610000,0x0,0x8000000,0x0,0x0,0x8000000,0x0,0x0,0x8000000,0x0,0x40000000,0x8000000,0x0,0x40000000,0x40000000,0x0,0x0,0x80000,0x80000,0x8000000,0x0,0x8000000,0x8000000,0x0,0x80000,0x0,0x8000000,0x8000000,0x0,0x8000000,0x8000000,0x0,0x0,0x8000000,0x8000000,0x0,0x8000000,0x8000000,0x0,0x0,0x0,0x8000000,0x40610000,0x400000,0x40000000,0x40000000,0x0,0x0,0x40000000,0x40000000,0x40000000,0x40000000,0x10000000,0x8000000,0x10000000,0x4000,0x8000,0x40610000,0x3f00,0x3f00,0x300000,0x300000,0xc0000,0xc0000,0x20000,0x40600000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x187e6780,0x0,0x0,0x187e6780,0x187e6780,0x18000,0x18000,0x0,0x0,0x0,0x40000000,0x0,0x0,0x40000000,0x0,0x40000000,0x0,0x0,0x80000000,0x0,0x0,0x40000000,0x20,0x0,0x0,0x6000000,0x0,0x0,0x6000000,0x20,0x1,0x0,0x0,0x1,0x187e6780,0x187e6780,0x10,0x40,0x187e6780,0x187e6780,0x187e6780,0x187e6780,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x102,0x0,0x40000000,0x102,0x0,0x37c02000,0xf4,0x0,0x203e00,0x203e00,0x0,0x37c02000,0x20009,0x0,0x37c02000,0x20009,0x20009,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x84,0x0,0x0,0x0,0x0,0x0,0x0,0xc4,0x0,0x0,0x40000000,0x0,0x20009,0x20009,0x0,0x0,0x20009,0x20009,0x20009,0x20009,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x37c02000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x4,0x0,0xa8f,0x4,0x0,0x204,0x0,0x0,0x0,0x0,0x0,0x204,0x4,0x0,0x204,0x4,0x4,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa8f,0x0,0x4,0x4,0x0,0x0,0x4,0x4,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0xa8f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa8f,0x204,};
   }

  /** Constructor with InputStream. */
  public Sintactico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Sintactico(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SintacticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Sintactico(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SintacticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Sintactico(SintacticoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SintacticoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[110];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 69; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 110; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
