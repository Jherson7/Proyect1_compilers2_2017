/* registro_proc.java */
/* Generated By:JavaCC: Do not edit this line. registro_proc.java */
package gramatica.registro_proc;
import ArbolAST.Nodo;
import javax.swing.JOptionPane;


public class registro_proc implements registro_procConstants {
public static Nodo root=null;

 public Nodo retornarArbol(){
        return root;
 }
 public static void main(String args[]) throws ParseException
        {
                try{
                        registro_proc miParser = new registro_proc(System.in);
                    root = miParser .Inicio();
                    JOptionPane.showMessageDialog(null, "Parseo Correcto", "COMPI2", 1);
                }catch(ParseException e){
                        System.out.println("Error al parsear, "+e.getMessage());
                        JOptionPane.showMessageDialog(null, "Parseo INCORRECTO", "COMPI2", 0);
                }

        }

  final public Nodo Inicio() throws ParseException {Nodo raiz,r;
raiz= new Nodo("registro_proc",0,0);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Procedure:
      case FUNC:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Procedure:{
        r = Procedure();
raiz.hijos.addLast(r);
        break;
        }
      case FUNC:{
        r = Funcion();
raiz.hijos.addLast(r);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
{if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Procedure() throws ParseException {Nodo raiz,param,r;Token a,b;
param=new Nodo("PARAMETROS",0,0);
    jj_consume_token(Procedure);
    jj_consume_token(NOMBRE);
    a = jj_consume_token(IDEN);
    jj_consume_token(C_NOMBRE);
raiz = new Nodo("PROC",a.beginLine,a.beginColumn,a.image);
    jj_consume_token(Param);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOL:
      case TEXT:
      case DATE:
      case DATETIME:
      case 40:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      r = Atributo();
param.hijos.addLast(r);
    }
    jj_consume_token(C_Param);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Src:{
      jj_consume_token(Src);
      b = jj_consume_token(CADENA);
      jj_consume_token(C_Scr);
raiz.hijos.addLast(new Nodo(b.image,b.beginLine,b.beginColumn));
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(C_Proc);
raiz.hijos.addLast(param);
  {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Funcion() throws ParseException {Nodo raiz,param,r;Token a,b;
param=new Nodo("PARAMETROS",0,0);
    jj_consume_token(FUNC);
    jj_consume_token(NOMBRE);
    a = jj_consume_token(IDEN);
    jj_consume_token(C_NOMBRE);
    jj_consume_token(RET);
    b = jj_consume_token(IDEN);
    jj_consume_token(C_RET);
raiz = new Nodo("FUNC",a.beginLine,a.beginColumn,a.image,b.image);
    jj_consume_token(Param);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOL:
      case TEXT:
      case DATE:
      case DATETIME:
      case 40:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      r = Atributo();
param.hijos.addLast(r);
    }
    jj_consume_token(C_Param);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Src:{
      jj_consume_token(Src);
      b = jj_consume_token(CADENA);
      jj_consume_token(C_Scr);
raiz.hijos.addLast(new Nodo(b.image,b.beginLine,b.beginColumn));
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(C_FUNC);
raiz.hijos.addLast(param);
  {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo Atributo() throws ParseException {Nodo raiz;Token a,b;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      a = jj_consume_token(INT);
      b = jj_consume_token(IDEN);
      jj_consume_token(C_INT);
{if ("" != null) return new Nodo("ATRIBUTO",a.beginLine,a.beginColumn,a.image,b.image);}
      break;
      }
    case BOOL:{
      a = jj_consume_token(BOOL);
      b = jj_consume_token(IDEN);
      jj_consume_token(C_BOOL);
{if ("" != null) return new Nodo("ATRIBUTO",a.beginLine,a.beginColumn,a.image,b.image);}
      break;
      }
    case TEXT:{
      a = jj_consume_token(TEXT);
      b = jj_consume_token(IDEN);
      jj_consume_token(C_TEXT);
{if ("" != null) return new Nodo("ATRIBUTO",a.beginLine,a.beginColumn,a.image,b.image);}
      break;
      }
    case DATE:{
      a = jj_consume_token(DATE);
      b = jj_consume_token(IDEN);
      jj_consume_token(C_DATE);
{if ("" != null) return new Nodo("ATRIBUTO",a.beginLine,a.beginColumn,a.image,b.image);}
      break;
      }
    case DATETIME:{
      a = jj_consume_token(DATETIME);
      b = jj_consume_token(IDEN);
      jj_consume_token(C_DATETIME);
{if ("" != null) return new Nodo("ATRIBUTO",a.beginLine,a.beginColumn,a.image,b.image);}
      break;
      }
    case 40:{
      jj_consume_token(40);
      a = jj_consume_token(IDEN);
      jj_consume_token(41);
      b = jj_consume_token(IDEN);
      jj_consume_token(40);
      jj_consume_token(42);
      jj_consume_token(IDEN);
      jj_consume_token(41);
{if ("" != null) return new Nodo("ATRIBUTO",a.beginLine,a.beginColumn,a.image,b.image);}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public registro_procTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x140,0x140,0x1c00000,0x1000,0x1c00000,0x1000,0x1c00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x103,0x0,0x103,0x0,0x103,};
   }

  /** Constructor with InputStream. */
  public registro_proc(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public registro_proc(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new registro_procTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public registro_proc(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new registro_procTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public registro_proc(registro_procTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(registro_procTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
